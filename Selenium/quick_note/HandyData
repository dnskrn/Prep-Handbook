=======================================================================
Selenium
=======================================================================
1. Alert
==========
Alert is an interface. It is used to handle the alert / popup.
3 types - Simple, Confirm, and Prompt.

Usage
=====
Alert alert = driver.switchTo().alert();

Methods
=======
accept();
dismiss();
getText();
sendKeys();
wait.until(ExpectedConditions.alertIsPresent()); - Wait and switch to Alert.

Exception
=========
1. NoAlertPresentException
2. UnhandledAlertException
=======================================================================
2. Dropdown
===========
Select Class which implements ISelect Interface and WrapElement Interface.
It is used to handle the dropdown.
2 types - Single, and Multiple.

Usage
=====
Select selectObj = new Select(WebElement);

Methods
=======
selectByIndex();
selectByValue();
selectByVisibleText();
deselectByIndex();
deselectByValue();
deselectByVisibleText();
isMultiple();
deselectAll(); - Works ONLY with MultiSelect Dropdown.
getOptions();
getAllSelectedOptions();
getFirstSelectedOption();
getOptions().get(index) - To get specific option text

Exception
=========
1. UnexpectedTagNameException

NOTES:
1. deselectBy* Methods works ONLY with MultiSelect Dropdown.
2. Single Dropdown doesn't support deselectBy* methods.
3. selectByIndex() - Index may start from 0 or 1 based on implementation.
=======================================================================
3. Frame
========
RemoteWebDriver.RemoteTargetLocator class which implements WebDriver.TargetLocator Interface.
It has methods to handle the Frame.

Usage
=====
driver.switchTo().frame();

Methods
=======
frame(Index);
frame(IdOrName);
frame(WebElement);
ParentFrame(); - To switch from Child Frame to Parent Frame.
defaultContent(); - To switch From Frame to Normal Window.
wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(ByLocator)); - Wait and switch to Frame.

Exception
=========
1. NoSuchFrameException

NOTES:
1. Frame index starts with 0.
=======================================================================
4. Navigation
=============
RemoteWebDriver.RemoteNavigation class which implements WebDriver.Navigation Interface.
It is used to handle the navigation related actions.

Usage
=====
driver.navigate()

Methods
=======
to();
back();
forward();
refresh();
=======================================================================
5. Window
=========
RemoteWebDriver.RemoteTargetLocator class which implements WebDriver.TargetLocator Interface.
It has methods to handle the Window.

Usage
=====
driver.switchTo().window();
driver.switchTo().newWindow();

Methods
=======
window(handle);
newWindow(WindowType.WINDOW/TAB);

RemoteWindow class which implements WebDriver.Window Interface.
It is used to handle the Window view and size related operations.

Usage
=====
driver.manage().window()

methods
=======
maximize();
minimize();
fullscreen();
setPosition(Point(X Axis, Y Axis));
getPosition();
setSize(Dimension(Width, Height));
getSize();

Related Information
===================
Point and Dimension are classes, which is used to handle the window
position and window size.

Usage
=====
driver.manage().window().setPosition(Point)
driver.manage().window().setSize(Dimension)

Methods
=======
getX() => getPosition().getX();
getY() => getPosition().getY();
getWidth() => getSize().getWidth();
getHeight() => getSize().getHeight();

Exception
=========
1. NoSuchWindowException
=======================================================================
6. Cookies
==========
A cookie is a small piece of information that will be stored on the Client machine.
It contains data such as session data, user preferences and tracking information.

RemoteWebDriverOptions class implements WebDriver.Options interface and which
has methods to handle the cookie and its related operations.

Cookie is a class which the attribute details to create the cookie.

Usage
=====
driver.manage().addCookie(CookieObject);
Cookie cookie = new Cookie(Name, Value);

Methods
=======
addCookie(cookieObject);
getCookieNamed(cookieName);
getCookies();
deleteCookieNamed(cookieName);
deleteCookie(cookieObject);
deleteAllCookies();

Exception
=========
1. InvalidCookieDomainException
2. NoSuchCookieException
3. UnableToSetCookieException
=======================================================================
7. Element
==========
RemoteWebElement class which implements WebElement Interface along with some
other interfaces. It is used to handle the element related actions such as
click, clear and enter, etc.

Usage
=====
driver.findElement(ByLocator);
WebElement element = driver.findElement(ByLocator);

Methods
=======
clear();
click();
sendKeys();
isEnabled();
isDisplayed();
isSelected();
getText();
getAttribute(attributeName);
getCssValue(propertyName);
findElement(locator);
findElements(locator);
getShadowRoot();
getTagName();
getAriaRole();
getAccessibleName();
getDomProperty(propertyName);
getDomAttribute(propertyName);

Exception
=========
1. NoSuchElementException
=======================================================================
8. Mouse Actions
================
Actions class is used to handle the mouse related and keyboard related
operations.

Usage
=====
Actions actionObject = new Actions(driver);

Methods
=======
click();
clickAndHold();
release();
sendKeys(element, value);
contextClick();
doubleClick();
moveToElement();
scrollToElement();
dragAndDrop(element1, element2);
dragAndDropBy(source, x offset, y offset);
pause(Duration);
((RemoteWebDriver)driver).resetInputState();
keyDown(Key);
keyUp(Key);

x offset - droppable.getX() - draggable.getX();
y offset - droppable.getY() - draggable.getY();

PointerInput
============
PointerInput class is used to simulate various pointer interactions on a web page.

Usage
=====
PointerInput mouse = new PointerInput(Mouse, "Default Mouse");

Methods
=======
createPointerDown();
createPointerUp();

Sequence
========
Sequence class is used to simulate a chain of actions.

Usage
=====
Sequence sequence = new Sequence(InputSource, Length);

Methods
=======
addAction();

Exception
=========
1. MoveTargetOutOfBoundsException
2. InvalidCoordinatesException
=======================================================================
9. Waits
========
RemoteTimeouts class which implements Timeouts Interface is used to handle
the ImplicitWait, PageLoadTimeout and ScriptTimeout.

Usage
=====
driver.manage().timeouts();

Methods
=======
implicitlyWait(duration);
pageLoadTimeout(duration);
scriptTimeout(duration);

WebDriverWait
=============
WebDriverWait class is used to handle the Explicit[WebDriverWait].

Usage
=====
WebDriverWait wait = new WebDriverWait(driver, duration);

Methods
=======
until(expectedConditions);

FluentWait
==========
FluentWait class is used to handle the Explicit[FluentWait].

Usage
=====
Wait<WebDriverWait> wait = new FluentWait<>(driver, duration)
.withTimeout(duration)
.pollingEvery(duration)
.ignoring(exception) /.ignoringAll(exception);

Methods
=======
until(expectedConditions);

ExpectedConditions
==================
ExpectedConditions class used with ExplicitWait to check for the
conditions.
=======================================================================
10. Screenshot
==============
RemoteWebDriver class implements TakeScreenshot interface, has a method
getScreenshotAs() to handle the screenshot functionality.

Usage
=====
TakeScreenshot takeScreen = (TakeScreenshot) driver;

Methods
=======
getScreenshotAs();

Example
=======
TakeScreenshot takeScreen = (TakeScreenshot) driver;
File src = takeScreen.getScreenshotAs(OutputType.FILE);
FileUtils.copy(src, new File("/image.png");
Files.copy(src, new File("/image.png");

driver.findElement(ByLocator).getScreenshotAs(OutputType.FILE);
FileUtils.copy(src, new File("/image.png");
Files.copy(src, new File("/image.png");

Note:
=====
Screenshot can be taken in 3 formats as below.
1. File
2. Byte
3. Base64

Screenshot can be taken for page level and element level.
=======================================================================
11. Print
=========
PrintOptions class, PDF class and PrintsPage Interface are used to print
the page.

Usage
=====
PrintOptions prints = new PrintOptions();

Methods
=======
print();
getContent();

Example
=======
PrintOptions prints = new PrintOptions();
PDF pdf = ((PrintsPage) driver).print(prints);
String content = pdf.getContent();
Files.write(OutputTypes.BYTES.convertFromBase64Png(content), new File("./print.pdf"));
=======================================================================
12. Page
========
RemoteWebDriver class implements WebDriver interface which is used to
handle the page related actions.

Usage
=====
driver.getTitle();
driver.getCurrentUrl();
driver.getPageSource();

Methods
=======
getTitle();
getCurrentUrl();
getPageSource();
=======================================================================
13. Wheel
=========
WheelInput and ScrollOrigin classes are used to handle the page scrolling related
operations.

Usage
=====
WheelInput.ScrollOrigin scrollOrigin = WheelInput.ScrollOrigin;

Methods
=======
fromElement(WebElement);
fromElement(WebElement, X-offset, Y-offset);
fromViewPort(x-offset, y-offset);
scrollToElement(WebElement);
scrollByAmount(X-axis, Y-axis);

Support class
=============
Actions actions = new Actions(driver);

Method
======
scrollFromOrigin(scrollOrigin, X-axis, Y-axis);

Example
=======
WheelInput.ScrollOrigin scrollOrigin = WheelInput.ScrollOrigin.fromElement(WebElement);
new Actions(driver).scrollFromOrigin(scrollOrigin, X-axis, Y-axis);
=======================================================================
14. Keyboard
============
Actions class is used to handle the Keyboard actions.
Keys Enum is used to provide the Keys needed for keyboard action.

Usage
=====
Actions actions = new Actions(driver);
Keys.chord(Keys);

Methods
=======
keyDown(Keys);
keyUp(Keys);
sendKeys(Keys);
sendKeys(chord);
sendKeys(Element, Keys);

Keys Enum method
================
chord(Keys);
=======================================================================
15. File
========
File upload and download are less common scenarios in automation.

Usage
=====
File Upload - element.sendKeys(FilePath);

Methods
=======
element.sendKeys(FilePathToUpload);

Note:
=====
1. Input tag type should be of file then ONLY the above sendKeys() method will
work.
2. Another options for file upload is with 3rd party tools AutoIT and Robot
class.

For downloading the file, we can customize the file download path with
ChromeOptions.

HashMap<String, Object> preferences = new HashMap<>();
preferences.set("profile.default_content_setting.popups", 0);
preferences.set("download.default_directory", System.getProperty("user.dir"));
ChromeOptions chromeOptions = new ChromeOptions();
chromeOptions.setExperiementalOption("prefs", preference);
new ChromeDriver(chromeOptions);

Note:
=====
1. After the file is downloaded, you can verify it using the Java Files class.
2. Another options for file download is with 3rd party widget tool.
=======================================================================
16. Driver
==========
ChromeOptions class which extends ChromiumOptions are responsible to handle
chrome driver related operations.
EdgeOptions class which extends ChromiumOptions are responsible to handle
edge driver related operations.
FirefoxOptions class are responsible to handle firefox driver related operations.

Usage
=====
ChromeOptions options = new ChromeOptions();
EdgeOptions options = new EdgeOptions();
FirefoxOptions options = new FirefoxOptions();

To get the BrowserVersion we have to use the capability. The Capability is an
interface. RemoteWebDriver class provides the method to get the capability.

Usage
=====
Capabilities cap = ((RemoteWebDriver)driver).getCapabilities();

Proxy
=====
Proxy is used to run the test on the proxy server.

Usage
=====
Proxy proxy = new Proxy();

Methods
=======
It has many methods. Let see fee important methods.
getBrowserName();
getBrowserVersion();
AddArguments(String);
setExperimentalOption(String, Object);
setCapability(Capability, boolean);
setPageLoadStrategy(PageLoadStrategy Enum);
setAcceptInsecureCerts(boolean);
setStrictFileInteractability(boolean);
setPageLoadTimeout(Duration);
setImplicitWaitTimeout(Duration);
setScriptTimeout(Duration);
setBinary(File);

Proxy Methods
=============
setHttpProxy("IP:Port");

ChromeDriverService is a class which is used to start the ChromeDriver
with customization.

Usage
=====
ChromeDriverService service = new ChromeDriverService.Builder().build();

Methods
=======
usingDriverExecutable(File);
usingPort(int);

Examples
========
chromeOptions.addArguments("--headless=new");
chromeOptions.addArguments("incognito");
chromeOptions.addArguments("start-maximized");

edgeOptions.addArguments("--headless=new");
edgeOptions.addArguments("-inprivate");
edgeOptions.addArguments("start-maximized");

firefoxOptions.addArguments("--headless");
firefoxOptions.addArguments("--private");
=======================================================================
17. JavaScriptExecutor
======================
RemoteWebDriver class provides implementation for the methods of
JavaScriptExecutor interface.
JavascriptExecutor is an interface provided by Selenium WebDriver to execute
JavaScript code within the context of the currently selected frame or window.

Usage
=====
JavascriptExecutor js = (JavascriptExecutor) driver;

Methods
=======
executeScript(Script, Arguments);
executeAsyncScript(Script, Arguments);

Note:
=====
1. DOM manipulation techniques.
2. To interact with dynamic web elements.
3. To handle AJAX calls.
4. To simulate user interactions like scrolling or dragging.
5. To execute JavaScript code to validate or manipulate the DOM.

Examples
========
jsExecutor.executeScript("arguments[0].value='';", input);
jsExecutor.executeScript("arguments[0].click()", button);
jsExecutor.executeScript("arguments[0].removeAttribute('disabled');", input);
jsExecutor.executeScript("arguments[0].value='" + expectedValue + "';", input);
jsExecutor.executeScript("window.scrollTo(0, document.body.scrollHeight)");
jsExecutor.executeScript("document.getElementById('home-page-tabs').scrollIntoView(true);");
jsExecutor.executeScript("return document.getElementsByTagName('img');");
jsExecutor.executeScript("return document.querySelectorAll('img');");
jsExecutor.executeScript("return document.getElementById('APjFqb');");
jsExecutor.executeScript("return document.querySelector(\"[name='q']\")")
jsExecutor.executeScript("return document.documentElement.innerText;").toString();
jsExecutor.executeScript("return document.title").toString();
jsExecutor.executeScript("return window.innerHeight;");
jsExecutor.executeScript("return window.innerWidth;");
jsExecutor.executeScript("arguments[0].setAttribute('style', 'background: yellow;
border: 2px solid green;')", input);
jsExecutor.executeScript("window.location = 'https://www.selenium.dev/'");
jsExecutor.executeScript("document.location.reload()");
jsExecutor.executeScript("history.go(0)");
jsExecutor.executeScript("window.scrollBy(0, " + pixel + ")");
jsExecutor.executeScript("window.scrollBy(0, -" + pixel + ")");
jsExecutor.executeScript("window.scrollTo(0, document.body.scrollHeight)");
jsExecutor.executeScript("window.scrollTo(0, -document.body.scrollHeight)");
jsExecutor.executeScript("window.scrollTo(-document.body.scrollWidth, 0)");
jsExecutor.executeScript("window.scrollTo(document.body.scrollWidth, 0)");
jsExecutor.executeScript("window.scrollTo(arguments[0],arguments[1]);",
element.getLocation().x,element.getLocation().y);
jsExecutor.executeScript("arguments[0].scrollIntoView(true)", element);
jsExecutor.executeScript("document.body.style.zoom='" + percent + "'");
=======================================================================
18. Locators
============
Locators in Selenium WebDriver are unique identifiers that help the
automation framework pinpoint specific web elements on a web page.

Types
=====
1. Traditional Locators (8)
2. Relative Locators (5)

Traditional Locators
====================
Id, ClassName, Name, TagName, LinkText, PartialLinkTest, CSS and Xpath.

Relative Locators
=================
1. below
2. above
3. toLeftOf
4. toRightOf
5. near

Usage
=====
driver.findElement(with(By.tagName()).above(By.id())).getAttribute();

XPath Locator Functions
=======================
1. contains
2. starts-with
3. text()
4. following
5. ancestor
6. child
7. preceding
8. following-sibling
9. parent
10. self
11. descendant
12. ancestor-or-self
13. descendant-or-self

CSS Locator Functions
=====================
1. css=tag#id
2. css=tag.class[attribute=value]
3. css=tag[attribute=value]
4. css=tag.class
5. css=tag[attribute^=value]
6. css=tag[attribute$=value]
7. css=tag[attribute*=value]
8. css=parentTag > childTag[attribute=value]
9. css=parentTag > childTag > subChildTag:nth-of-type(index)
10. ~: Descendant combinator
11. +: Adjacent sibling combinator
12. css=:first-child
13. css=:last-child
14. css=:nth-child(n)
15. css=li:nth-child(n):not(ol > li:nth-child(n))
=======================================================================
19. Shadow DOM
==============
The Shadow DOM (Document Object Model) is a feature of web browsers that
allows developers to encapsulate the structure and styles of a component,
keeping them separate from the rest of the document.

Types
=====
1. Open ShadowDOM
2. Closed ShadowDOM

Components
==========
Shadow HOST: The regular DOM node that the Shadow DOM is attached to.
Shadow TREE: The DOM tree inside the Shadow DOM.
Shadow BOUNDARY: The place where the Shadow DOM ends, and the regular DOM begins.
Shadow ROOT: The root node of the Shadow tree.

RemoteWebElement class has method getShadowRoot() which is used to interact
with ShadowDOM elements.

Usage
=====
WebElement DOMElement = driver.findElement(By.cssSelector("locator"));
SearchContext shadowRoot = DOMElement.getShadowRoot();
shadowRoot.findElement(By.cssSelector("locator")).sendKeys("ShadowDOM");

Note:
=====
1. ShadowDOM can be handled by Selenium getShadowRoot() method.
2. ShadowDOM can also be handled by JavaScriptExecutor.
=======================================================================