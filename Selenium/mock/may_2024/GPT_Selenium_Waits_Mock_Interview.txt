What are waits in Selenium, and why are they important?

The Waits in Selenium are used to make the test script to wait for certain actions to happen on
AUT. The Waits are basically used to handle the syncup issues which arises in test automation.
The Waits are very important for the robust and seamless execution of the test scripts. The Waits
are used to handle the synchronization issues between the scripts and the application under test.

What are the different types of waits available in Selenium WebDriver?

In selenium, we have 2 major types of Waits as below.
1. Implicit Wait
2. Explicit Wait
	a. FluentWait
The Explicit Wait has its own variation which is called as FluentWait.
	
Explain implicit wait with an example.

The Implicit Wait in selenium is used to declare at global level. The implicit wait will be applied
to all the elements in the application under test. The Implicit Wait is declared as below.

driver.manage().timeouts().ImplicitlyWait(Duration.ofSeconds(10));

The Implicit Wait takes the amount of time in Seconds to wait. Here, the Implicit Wait will for the
elements for 10 seconds. The Implicit wait will wait for the element and if the element found in 5th 
second, then the Implicit wait will move on with the other elements / script lines in test. It will 
not wait for the whole 10 seconds after finding the element. If suppose, the element is not found
in the given 10 seconds, then NoSuchElementException will be thrown.

Explain explicit wait with an example.

The Explicit Wait in Selenium is used to declared for the specific element. The Explicit Wait will be
used with Conditions. So, the explicit wait will for the element to meet the given condition under the
given wait time. The Explicit Wait is declared as below.

WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement button = driver.findElement(By.id("login-btn"));
wait.until(ExpectedConditions.elementToBeClickable(button));

The Explicit Wait takes the amount of time in Seconds to wait. Here, the Explicit Wait is used with
ExpectedConditions which is button element to be clickable. The Explicit Wait will for the
elements for 10 seconds for the condition to met. The Explicit wait will wait for the element and 
if the element is clickable in 5th second, then the Explicit wait will move on with the other elements /
script lines in test. It will not wait for the whole 10 seconds after the condition is met. If suppose,
the element didn't met the condition in the given 10 seconds, then NoSuchElementException will be thrown.

What is WebDriverWait in Selenium?

The WebDriverWait is classified as the Explicit wait in Selenium. It is applied to the specific elements
on the test script. It will not be applied to all the elements. It is used along with the ExpectedConditions.

WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement button = driver.findElement(By.id("login-btn"));
wait.until(ExpectedConditions.elementToBeClickable(button));

What is FluentWait in Selenium, and how does it differ from WebDriverWait?

The FluentWait is the sub type of the Explicit Wait. It is used to wait for the specific elements on the test
scripts. The FluentWait has fine grained control over the element when it has to wait for it when compared
with the WebDriverWait. The FluentWait has the facilities to setup polling interval and ignoring the exceptions.

The FluentWait can be declared as below.

Wait<WebDriver> wait = new FluentWait<>(driver)
.withTimeout(Duration.ofSeconds(10))
.pollingEvery(Duration.ofSeconds(2))
.ignoring(NoSuchElementException.class);
WebElement button = driver.findElement(By.id("login-btn"));
wait.until(ExpectedConditions.elementToBeClickable(button));

Can you provide an example of using FluentWait in Selenium?

public class WaitDemo {

	public static void main(String[] args) {
		
		WebDriver driver = new ChromeDriver();
		driver.get("www.example.com/");
		
		WebElement singInButton = driver.findElement(By.id("signin-btn"));
		
		Wait<WebDriver> wait = new FluentWait<>(driver)
		.withTimeout(Duration.ofSeconds(10))
		.pollingEvery(Duration.ofSeconds(2))
		.ignoring(NoSuchElementException.class);

		wait.until(ExpectedConditions.elementToBeClickable(singInButton));
		singInButton.click();
	}
}

What is the default polling interval of FluentWait in Selenium, and how can it be changed?

The default polling interval of FluentWait is 500 milliseconds. It can be changed with the 
user specificed value.

Wait<WebDriver> wait = new FluentWait<>(driver)
		.withTimeout(Duration.ofSeconds(10))
		.pollingEvery(Duration.ofSeconds(2))
		.ignoring(NoSuchElementException.class);

Here, in the above code, the default polling interval is updated from 500 milliseconds to 
2 seconds.

How can you handle a situation where an element is not immediately visible on the page?

We can handle this situation using the WebDriverWait. It can be used to wait for the visibility
of the element with the help of ExpectedConditions as below.

WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement link = driver.findElement(By.id("login-link"));
wait.until(ExpectedConditions.visibilityOfElement(button));

The above code is used to wait for the element to become visible on the web page.

What is the significance of the ExpectedConditions class in Selenium?

The ExpectedConditions plays an important role in Explicit Wait mechanism in Selenium. The 
Explicit Wait works along with the ExpectedConditions to handle the synchronization issues.
The ExpectedConditions helps to check the condition of the element and the explicit wait 
works based on the condition with the timeouts. The condition can be like visibility of element,
clickable of element, etc.

How do you handle Ajax-based applications with waits in Selenium?

The Ajax-based applications can be handled with Explicit Wait. The WebDriverWait / FluentWait
can be used to handle the dynamic loading which happens with the Ajax-based calls on the web page.

What is the difference between Thread.sleep() and Selenium waits?

The Thread.sleep() method is part of Java and its used to halt the entire program execution for the 
specific amount of time whereas Selenium waits will not halt the entire program instead it will wait
for the element in case of ImplicitlyWait and it will wait for the condition to met within the given
time with the Explicit wait.

What are some common pitfalls when using waits in Selenium?

I'm not sure, but the only one point I know as below.
The Common pitfalls as below.
1. Use of ImplicitlyWait may increase the execution time of the scripts.

Additional pitfalls include: using too many explicit waits without proper condition checks, setting waits
too short or too long, and not combining waits appropriately.

How can you implement a custom wait condition in Selenium?

The Custom Wait condition can be implemented with the help of FluentWait. The FluentWait can be used
to implement the custom wait condition.

Explain how to use the until method with WebDriverWait.

The until() method is used in the Explicit wait. The Until() method takes the ExpectedConditions as param.
The Explicit wait will wait until the ExpectedConditions becomes true for the element.

What are the advantages and disadvantages of using implicit wait?

Advantages
==========
1. It can handle the synchronization issues.
2. Easy to implement.

Disadvantages
=============
1. By default, the implicit wait will applicable to all elements used in the test script, which increases
the test execution time.

What are the advantages and disadvantages of using explicit wait?

Advantages
==========
1. It can handle the synchronization issues.
2. Easy to implement and has more facilities with waiting.
3. It can be applied to specific elements.

Disadvantages
=============
1. Using the explicit wait excessively, will increase the test execution time.

=====================================================

Implicit Wait: You've accurately described how implicit waits are declared globally and apply to all elements.
Explicit Wait: Your explanation of explicit waits using WebDriverWait and ExpectedConditions is perfect.
FluentWait: You've precisely explained FluentWait as a sub-type of Explicit Wait with finer control and exception handling.
WebDriverWait vs FluentWait: The distinction between WebDriverWait and FluentWait regarding customizability is well-explained.
Default Polling Interval: You're spot on about the default polling interval and how to change it in FluentWait.
Handling Invisible Elements: The use of WebDriverWait with ExpectedConditions for element visibility is perfect.
ExpectedConditions Class: Your explanation of ExpectedConditions' role in Explicit Waits is accurate.
Handling Ajax Applications: You've correctly identified WebDriverWait/FluentWait for handling dynamic Ajax loading.
Thread.sleep() vs Selenium Waits: The differentiation between Thread.sleep() halting the program and Selenium waits being element-specific is perfect.
Custom Wait Conditions: Your explanation of using FluentWait for custom conditions is accurate.
until() method: You've correctly explained the until() method's usage with ExpectedConditions.
Implicit Wait Advantages/Disadvantages: Your points regarding ease of use and potential execution time increase are spot on.
Explicit Wait Advantages/Disadvantages: The explanation of finer control, applicability to specific elements, and potential for increased execution time is perfect.
Areas for improvement:

Common pitfalls: You can add more common pitfalls besides increased execution time with implicit waits. For instance, using implicit waits might mask actual issues like flaky tests or slow element loading.
Additional Points:

You can mention advantages of implicit waits like reduced code complexity compared to explicit waits.
While not a major point, the NoSuchElementException is thrown when an element is not found, not necessarily after the timeout.
Overall, your understanding of Selenium waits is comprehensive and accurate. Keep up the excellent work!