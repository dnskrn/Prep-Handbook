JavaScriptExecutor Questions
============================

==============================================================================================================
General
==============================================================================================================

1. What is JavascriptExecutor in Selenium?
JavascriptExecutor is an interface provided by Selenium WebDriver to execute JavaScript code
within the context of the currently selected frame or window. It allows interaction with DOM
elements and handling of asynchronous operations which are not directly supported by Selenium.

2. When would you use JavascriptExecutor in Selenium testing?
JavascriptExecutor is useful in Selenium testing in the following scenarios:
1. To perform actions on web elements that are not supported by Selenium's WebDriver API.
Interacting with hidden or non-interactive elements: If a web element is hidden (e.g., using
CSS display: none;) or otherwise not readily clickable or type-able with WebDriver's standard
methods, JavaScriptExecutor allows you to employ JavaScript to interact with it directly using
DOM manipulation techniques.
2. To interact with dynamic web elements.
3. To handle AJAX calls.
4. To simulate user interactions like scrolling or dragging.
5. To execute JavaScript code to validate or manipulate the DOM.

3. How do you instantiate JavascriptExecutor in Selenium WebDriver?
In Java, you can instantiate JavascriptExecutor as follows:
JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;

4. What are the methods provided by JavascriptExecutor interface?
Some of the commonly used methods are:
1. executeScript(String script, Object... args): Executes JavaScript code.
2. executeAsyncScript(String script, Object... args): Executes asynchronous JavaScript code.

5. How can you scroll to an element using JavascriptExecutor?
You can scroll to an element using JavaScript code. For example:
JavaScriptExecutor jsExecutor = (JavaScriptExecutor) driver;
jsExecutor.executeScript("arguments[0].scrollIntoView(true);", WebElement);

6. How do you highlight an element using JavascriptExecutor?
You can highlight an element using JavaScript by changing its border style. For example:
JavaScriptExecutor jsExecutor = (JavaScriptExecutor) driver;
jsExecutor.executeScript("arguments[0].style.border='2px solid green';", WebElement);

7. Describe the return types of methods provided by JavaScriptExecutor?
JavaScriptExecutor offers two primary methods for executing JavaScript:

1. executeScript(script, args...): This method synchronously executes the provided JavaScript
code (script) within the context of the current frame or window. It accepts optional arguments
(args...) that can be passed to the script. The return value can be an HTML element (WebElement),
a primitive value (number, string, Boolean), or null depending on the executed script.

2. executeAsyncScript(script, args...): This method asynchronously executes the provided JavaScript
code, enabling you to interact with elements that might not be immediately available or require
time to load. The script can take a callback function to handle the result once it's available.
The return value is generally null.

8. How can you use JavaScriptExecutor to wait for an element to become visible?
You can employ JavaScriptExecutor in conjunction with a WebDriverWait to create a custom waiting
condition based on JavaScript logic. Here's an illustration:

WebDriverWait wait = new WebDriverWait(Driver, Duration.ofSeconds(10));
JavaScriptExecutor jsExecutor = (JavaScriptExecutor) driver;
wait.until(new ExpectedCondition<Boolean>() {
    public Boolean apply(WebDriver driver){
        return (Boolean) jsExecutor.executeScript("return document.getElementById('element').style.display !== 'none';");
    }
});

==============================================================================================================
Exceptions
==============================================================================================================

JavaScriptException:
====================
This exception occurs when there are syntax errors or other issues with the JavaScript code
being executed. It may be thrown if the JavaScript code contains invalid syntax, undefined
variables, or references to non-existing functions or objects.