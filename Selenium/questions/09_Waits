Wait Questions
==============

==============================================================================================================
General
==============================================================================================================

1. What is synchronization in Selenium and why is it necessary?
Answer: Synchronization in Selenium refers to the mechanism of controlling the flow of execution to
ensure that the test scripts wait for the elements to be present or ready before interacting with
them. It is necessary to avoid issues related to the timing mismatch between the test script and the
application under test, ensuring a more stable and reliable test execution.

2. Explain the different types of waits in Selenium.
Answer: Selenium provides three types of waits:
Implicit Wait: Sets a global wait timeout for the WebDriver to wait for an element before throwing an
exception.
Explicit Wait: Waits for a certain condition to be true before proceeding to the next step. It allows
waiting for specific elements with custom conditions.
Fluent Wait: Provides more flexibility by allowing the definition of polling frequency and maximum
timeout. It also ignores specific exceptions during polling.

3. Differentiate between implicit and explicit waits.
Answer:
Implicit Wait: It is applied globally to the entire script and is set only once. It is used to set a
default waiting time for the WebDriver to wait for an element.
Explicit Wait: It is applied to a particular instance or a specific element. It waits for a certain
condition to be met and is more granular, allowing customization of conditions for different elements.

4. How do you use Explicit Wait in Selenium?
Answer: Explicit Wait is used by creating an instance of WebDriverWait and applying it to a specific
WebDriver instance.
Here's an example in Java:
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); // 10 seconds timeout
WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("example")));

5. What is the difference between Thread.sleep() and Implicit Wait?
Answer:
Thread.sleep(): It is a static wait and pauses the execution of the entire script for a specified
duration, regardless of whether the element is ready or not. It is not recommended as it can lead
to inefficient and unpredictable scripts.
Implicit Wait: It is dynamic and applies only to the elements specified by the WebDriver. It waits
for the defined time for an element to be present before throwing an exception.

6. Explain the ExpectedConditions class in Selenium?
Answer: ExpectedConditions is a class in Selenium used with WebDriverWait to define the expected
conditions for waiting. It provides various conditions such as visibility of an element, presence
of an element, click-ability, etc.
For example:
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("example")));

7. When to use Implicit Wait and Explicit Waits?
Answer: Use Implicit Wait when you want a global setting for the entire script, providing a default
waiting time for all elements. Use Explicit Wait when you need more control over specific elements,
allowing you to wait for conditions that are tailored to different situations.

In general, it's recommended to use Explicit Waits for better control and reliability in your Selenium
scripts. Implicit Wait can still be used in certain situations, but it might lead to longer waiting
times and less precise synchronization.

8. When to use Explicit Wait and Fluent Wait?
Answer: Use Explicit Wait for standard synchronization scenarios where predefined conditions are
sufficient. Use Fluent Wait when you need more customization in terms of polling frequency, exception
handling, or other non-standard conditions. Both Explicit Wait and Fluent Wait enhance the reliability
and stability of your Selenium scripts by addressing synchronization issues.

Common scenario to use Explicit Wait as below,
1. PageLoad
2. Ajax Call
3. Dynamic Elements
4. Animations
5. Custom Conditions
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("example")));

Common scenario to use Fluent Wait as below,
1. Variable Wait Times
2. Polling Frequency
3. Ignoring Exceptions
4. Non-Standard Conditions
Wait<WebDriver> wait = new FluentWait<>(driver)
    .withTimeout(Duration.ofSeconds(10))
    .pollingEvery(Duration.ofSeconds(2))
    .ignoring(NoSuchElementException.class);
WebElement element = wait.until(driver -> driver.findElement(By.id("example")));

9. Explain the behaviour of Implicit wait for below scenarios which has configured for 10 seconds?
   In scenario 1, if the element is found before 10 seconds.
   In scenario 2, if the element is not found in 10 seconds.
Answer:
Scenario 1: Element Found Before 10 Seconds
When an Implicit Wait is configured for 10 seconds and the element is found before the specified
wait time, the WebDriver will not wait for the entire duration. Instead, it will proceed with the
next steps in the script as soon as the element is located.

For example (in Java):
WebDriver driver = new ChromeDriver();
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
// Assuming the element is found within 5 seconds
WebElement element = driver.findElement(By.id("example"));
// Continue with further actions on the element
element.click();

Scenario 2: Element Not Found in 10 Seconds
If the element is not found within the specified implicit wait time of 10 seconds, the WebDriver
will throw a NoSuchElementException. This exception indicates that the WebDriver could not locate
the element even after waiting for the defined time.

For example (in Java):
WebDriver driver = new ChromeDriver();
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
try {
    // Assuming the element is not found within 10 seconds
    WebElement element = driver.findElement(By.id("example"));
    // Further actions on the element (won't be executed in this case)
    element.click();
} catch (NoSuchElementException e) {
    // Handle the exception or log a message indicating that the element was not found
    System.out.println("Element not found within the implicit wait time");
}

10. Explain the behaviour of Explicit wait for below scenarios which has configured for 10 seconds?
    In scenario 1, if the element is found before 10 seconds.
    In scenario 2, if the element is not found in 10 seconds.
Answer:
Scenario 1: Element Found Before 10 Seconds (Explicit Wait)
When an Explicit Wait is configured for 10 seconds and the element is found before the specified wait
time, the WebDriver will not wait for the entire duration. Instead, it will proceed with the next steps
in the script as soon as the specified condition for the element is met. The actual waiting time is
dynamic and depends on when the specified condition is satisfied.

For example (in Java):
WebDriver driver = new ChromeDriver();
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
// Assuming the condition for the element is met within 5 seconds
WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("example")));
// Continue with further actions on the element
element.click();

Scenario 2: Element Not Found in 10 Seconds (Explicit Wait)
If the element is not found within the specified explicit wait time of 10 seconds, and the condition
is not met, the WebDriver will throw a TimeoutException. This exception indicates that the WebDriver
waited for the defined time but the condition was not fulfilled.

For example (in Java):
WebDriver driver = new ChromeDriver();
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)));
try {
    // Assuming the condition for the element is not met within 10 seconds
    WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("example")));
    // Further actions on the element (won't be executed in this case)
    element.click();
} catch (TimeoutException e) {
    // Handle the exception or log a message indicating that the condition was not met
    System.out.println("Element not found within the explicit wait time");
}

11. Explain the behaviour of Fluent wait for below scenarios which has configured for 10 seconds?
    In scenario 1, if the element is found before 10 seconds.
    In scenario 2, if the element is not found in 10 seconds.
Answer:
Scenario 1: Element Found Before 10 Seconds (Fluent Wait)
When a Fluent Wait is configured for 10 seconds and the element is found before the specified wait
time, the WebDriver will not wait for the entire duration. Instead, it will proceed with the next
steps in the script as soon as the specified condition for the element is met. The actual waiting
time is dynamic and depends on when the specified condition is satisfied.

Here's an example using Fluent Wait in Java:
WebDriver driver = new ChromeDriver();
Wait<WebDriver> wait = new FluentWait<>(driver)
    .withTimeout(Duration.ofSeconds(10))
    .pollingEvery(Duration.ofSeconds(2))
    .ignoring(NoSuchElementException.class);
// Assuming the condition for the element is met within 5 seconds
WebElement element = wait.until(driver -> driver.findElement(By.id("example")));
// Continue with further actions on the element
element.click();

Scenario 2: Element Not Found in 10 Seconds (Fluent Wait)
If the element is not found within the specified Fluent Wait time of 10 seconds, and the condition
is not met, the WebDriver will throw a TimeoutException. This exception indicates that the WebDriver
waited for the defined time but the condition was not fulfilled.

Here's an example:
WebDriver driver = new ChromeDriver();
Wait<WebDriver> wait = new FluentWait<>(driver)
    .withTimeout(Duration.ofSeconds(10))
    .pollingEvery(Duration.ofSeconds(2))
    .ignoring(NoSuchElementException.class);
try {
    // Assuming the condition for the element is not met within 10 seconds
    WebElement element = wait.until(driver -> driver.findElement(By.id("example")));
    // Further actions on the element (won't be executed in this case)
    element.click();
} catch (TimeoutException e) {
    // Handle the exception or log a message indicating that the condition was not met
    System.out.println("Element not found within the Fluent Wait time");
}

12. Can you use both Implicit Wait and Explicit Wait in the same Selenium script? If yes, how?
Answer: Yes, you can use both Implicit Wait and Explicit Wait in the same script. Implicit Wait
sets a global timeout for the entire script, while Explicit Wait can be applied to specific
elements or conditions. When used together, Explicit Wait takes precedence over Implicit Wait
for the elements to which it is applied.

13. Explain a situation where Implicit Wait may lead to longer execution times and how you can
address it?
Answer: Implicit Wait may lead to longer execution times when set to a high value globally,
causing unnecessary delays. To address this, you can use a combination of Implicit and Explicit
Waits. Set a reasonable Implicit Wait globally and use Explicit Waits for specific critical
elements or actions to provide more control and reduce overall execution time.

14. How do you handle dynamic elements that load at different times during test execution?
Answer: To handle dynamic elements, use Explicit Waits with conditions like visibilityOfElementLocated,
elementToBeClickable, or custom conditions. This ensures that the script waits until the element is
present and ready for interaction, regardless of when it appears during the execution.

15. Question: Explain the difference between driver.findElement() and wait.until() in Selenium.
Answer:
driver.findElement(): It is used to find an element immediately. If the element is not found,
it throws a NoSuchElementException.
wait.until(): It is part of Explicit Wait and is used to wait for a specified condition to be
true before proceeding. It returns the element once the condition is met, or it throws a
TimeoutException if the condition is not satisfied within the specified time.

16. How do you handle scenarios where an element is present in the DOM but not immediately
visible on the web page?
Answer: In such scenarios, you can use Explicit Waits with conditions like visibilityOfElementLocated
or elementToBeClickable. These conditions ensure that the element is not only present in the DOM but
also visible and ready for interaction.

17. Explain the concept of staleness in Selenium and how you can handle it.
Answer: Staleness occurs when an element is no longer attached to the DOM. To handle staleness, you
can use the ExpectedConditions class and the stalenessOf condition in Explicit Waits. This condition
waits for the element to become stale, indicating that it has been removed or replaced on the web page.

18. How would you handle a situation where a web page contains multiple Ajax requests, and you need
to wait for all of them to complete before proceeding with the next steps in your script?
Answer: In this scenario, you can use a combination of ExpectedConditions with Explicit Wait. You can
wait for the presence of specific elements or conditions that indicate the completion of the Ajax
requests.

For example:
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
// Wait for the presence of an element indicating the completion of Ajax requests
wait.until(ExpectedConditions.presenceOfElementLocated(By.id("ajaxCompleteIndicator")));

19. You are testing a web application where certain elements are loaded asynchronously, and the loading
time may vary. How would you dynamically adjust your wait time to ensure efficient test execution?
Answer: To dynamically adjust the wait time, you can use Fluent Wait. You can define a custom condition
and set a dynamic polling interval based on specific criteria.
This approach allows the script to wait dynamically, adjusting to the changing loading times of
asynchronous elements.

Here's an example in Java:
Wait<WebDriver> wait = new FluentWait<>(driver)
    .withTimeout(Duration.ofSeconds(20))
    .pollingEvery(Duration.ofSeconds(1))
    .ignoring(NoSuchElementException.class);
WebElement element = wait.until(driver -> {
    // Custom condition to check the presence of the element
    WebElement el = driver.findElement(By.id("example"));
    if (el.isDisplayed()) {
        return el;
    } else {
        return null;
    }
});

20. How do you handle scenarios where the web application uses lazy loading for images, and you need
to wait for images to load before interacting with them?
Answer: You can use Explicit Wait with a custom condition to wait for the images to load. The condition
can check the 'complete' status of the images.
This condition ensures that the script waits for the page to be fully loaded, including the lazy-loaded
images.

Here's an example:
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
// Wait for all images to be loaded
wait.until(driver -> ((JavascriptExecutor) driver)
    .executeScript("return document.readyState").equals("complete"));

21. You are dealing with a scenario where a button becomes clickable after a certain amount of time. How
do you handle this dynamic condition using Explicit Wait?
Answer: You can use the elementToBeClickable condition in Explicit Wait to wait for the button to become
clickable.
This condition ensures that the script waits for the button to be both present in the DOM and clickable.

Here's an example:
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
// Wait for the button to be clickable
WebElement button = wait.until(ExpectedConditions.elementToBeClickable(By.id("example")));
// Proceed with clicking the button
button.click();

22. Explain how you would implement a timeout mechanism for the entire test script, ensuring it does not
run indefinitely, even if there are unexpected delays in execution.
Answer: To implement a timeout mechanism for the entire test script, you can set a global timeout using
implicitlyWait for the WebDriver instance. Additionally, you can use a mechanism to handle unexpected
delays during test execution.
This way, the script will not run indefinitely, and you can handle unexpected delays or exceptions within
the try-catch block.

Here's an example in Java:
WebDriver driver = new ChromeDriver();
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30)); // Set a global timeout
try {
    // Execute your test steps
    // ...

} catch (Exception e) {
    // Handle unexpected delays or exceptions
    System.out.println("Test execution failed due to unexpected delay: " + e.getMessage());
} finally {
    // Close the WebDriver instance to release resources
    driver.quit();
}

23. What is the use of pageLoadTimeout() in Selenium?
Answer: In Selenium, pageLoadTimeout() is a method used to set the maximum amount of time that the
WebDriver will wait for a page to load completely. When a web page is loaded, it may involve various
resources such as images, stylesheets, scripts, and more. The pageLoadTimeout() method allows you to
define a timeout duration, and if the page does not load within that specified time, it triggers a
TimeoutException.
The primary use of pageLoadTimeout() is to ensure that your Selenium script doesn't wait indefinitely
for a page to load, preventing excessive delays in test execution. This timeout is specific to the
initial page load, and it does not affect the waiting time for elements to become available or
intractable, which is controlled by implicit or explicit waits.

24. What is the use of scriptTimeout() in Selenium?
Answer: In Selenium, scriptTimeout() is a method used to set the maximum amount of time that the
WebDriver will wait for asynchronous scripts to execute. Asynchronous scripts include JavaScript
code that may be triggered by the web page or initiated by your test script. The scriptTimeout()
method allows you to define a timeout duration for these scripts, and if the scripts do not complete
within the specified time, it triggers a TimeoutException.
The primary purpose of scriptTimeout() is to prevent your Selenium script from waiting indefinitely
for asynchronous scripts to finish execution. It ensures that your script does not hang or experience
excessive delays caused by long-running or never-ending JavaScript operations.

==============================================================================================================
Exceptions
==============================================================================================================

1. TimeoutException:
====================
Description: This exception is thrown when the specified condition is not met within the specified
timeout duration.
Example Scenario: If an element is not visible or clickable within the specified wait time, a
TimeoutException is triggered.

2. NoSuchElementException:
==========================
Description: This exception is thrown when attempting to find an element using findElement() or
findElements() methods, and the element is not present in the DOM.
Example Scenario: If an element is not found during an explicit or implicit wait, a NoSuchElementException
is raised.

3. StaleElementReferenceException:
==================================
Description: This exception is thrown when interacting with an element that has become stale or is no
longer attached to the DOM.
Example Scenario: If you locate an element, navigate to another page, and then attempt to interact with
the previously located element, a StaleElementReferenceException occurs.

Example
=======
Imagine you're trying to give a friend a gift. You know where their house is, but by the
time you get there, they've moved. That's basically what a StaleElementReferenceException
is in Selenium.

4. ElementNotVisibleException:
==============================
Description: This exception is thrown when trying to interact with an element that is present in the
DOM but not currently visible on the web page.
Example Scenario: If you attempt to click on an element that is hidden or covered by another element,
an ElementNotVisibleException is raised.

Example
=======
Imagine you're trying to find a book on a shelf. The book is there, but it's behind another
book, so you can't see it. That's basically what an ElementNotVisibleException is in Selenium.

5. ElementNotInteractableException:
===================================
Description: This exception is thrown when trying to interact with an element that cannot be interacted
with using the specified action, such as clicking on a non-clickable element.
Example Scenario: If you try to click on a non-clickable element, an ElementNotInteractableException is
triggered.

Example
=======
Imagine you're trying to open a locked door. The door is there, and it's visible, but
it's locked. You can't interact with it until you unlock it. That's basically what an
ElementNotInteractableException is in Selenium.