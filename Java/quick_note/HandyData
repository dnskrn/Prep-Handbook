====================================================================================
1. Polymorphism [Ability of an object to take multiple forms]
===============
Polymorphism - In Java, it allows objects of different classes to be treated as an
object of common super class thru Inheritance, Method Overloading and Overriding.

2 Types of polymorphism
=======================
1. Compile Time
2. Runtime

1. Method Overloading AKA Early Binding / Static Binding / Compile Time Polymorphism
   / Static Method Dispatch.
2. Method Overriding AKA Late Binding / Dynamic Binding / Runtime Polymorphism
   / Dynamic Method Dispatch.
3. Usage of Parent reference to hold the Child object it’s the concept of Polymorphism.
   List l = new ArrayList ();
   List l = new LinkedList ();

Note:
=====
Parent class reference can be used to hold the Child object. By using that reference
we can call only the methods available in parent class. But we can’t call child class
methods whereas using the child class reference we can call both methods.
====================================================================================
2. Method Overloading [Method Resolution takes care by Compiler]
=====================
MO - Method Overloading

Method Overloading AKA Early Binding / Static Binding / Compile Time Polymorphism
/ Static Method Dispatch.

1. Same method name with different parameters.
2. Criteria - Number of params, Type of params, Order of params. We can't overload
   only with order of params. We need different number or type of params.
3. Return Type and Access modifiers are not considered in MO.
4. VarArg method can be used in method overloading. But it takes least precedence.
5. Compiler calls the correct method with the help of number, type and
   order of params in method overloading.
6. Autoboxing and Widening is used along with method overloading. AB helps to
   convert the primitive type to its wrapper type and WD helps to convert the
   smaller data type to larger data type.
7. Compiler choose most specific /closest implementation while calling a method in
   method overloading.
8. Method Overloading works on reference type not based on the runtime object.

Notes:
======
1. Autoboxing and Unboxing may sometimes pays way for ambiguity in the MO.
2. Widening or Narrowing takes precedence over the Autoboxing and unboxing.
====================================================================================
3. Method Overriding [Method Resolution takes care by JVM]
====================

Method Overriding AKA Late Binding / Dynamic Binding / Runtime Polymorphism
/ Dynamic Method Dispatch.

1. Subclass method provides implementation for the method which is already in
   Superclass.
2. Criteria - Same method name, inheritance hierarchy, non-static methods, and
   not private methods.
3. Private and Static methods can't be overridden. Final class methods can't be
   Overridden.
4. Method Hiding involves creation of new method with same name in a subclass.
   It can be achieved with static methods.
5. Return of the overriding method can be same or covariant type [Sub type].
6. Visibility of access modifiers can be increased or maintained in same level
   but can't be decreased.
7. Checked Exception thrown by overriding method should be same as Superclass
   method or less than the Superclass method. But, overriding method can throw
   runtime exception.
8. Super Keyword can be used in Subclass overriding method to call the Superclass
   methods / members.
9. Superclass default constructor can be called automatically when the Subclass
   constructor is invoked.
10. Method Overriding works based on the runtime object rather than the reference
   type.
====================================================================================
4. Encapsulation
================
1. Encapsulation = Data Hiding + Abstraction.
    Data Hiding => Data hiding refers to the practice of making the internal state of
    an object inaccessible from outside of the object's definition.
    Abstraction => Abstraction, focuses on hiding the complex implementation details
    and showing only the essential features of an object.
2. Criteria - Private variables and Public getters and setters.
3. Integrity, Access Control and Code Organization.
4. Benefits - Data hiding, Modularity, Flexibility and Security.
5. Without Encapsulation - It leads to Data inconsistency and compromise on the
   integrity of the code.
6. Encapsulation promotes loose coupling and high cohesion.
7. Alternatives for Setters/Getters - Builder Pattern and Immutable Objects.
8. Java Reflections might have impact on Encapsulation. It access private members,
   violation of  encapsulation, and security risks.
====================================================================================
5. Inheritance
==============
1. Inheritance AKA Is-A Relationship.
2. It is a mechanism by which one class can acquire / access the properties and
   behaviours of another class.
3. Extends keyword is used to implement the inheritance relation.
4. Types - Single, Multilevel, Hierarchical and Multiple [Not supported by Class, but
   by Interface].
5. Only properties[variables] and methods can be inherited whereas Constructors can't be
   inherited.
6. Final classes can't be inherited. Likewise private members [fields / methods] can't
   be inherited.
7. Example - Object class in Java is a root class for all the classes in Java. It's
   methods - equals(), hashCode() and toString() is accessible all Java classes.
8. Benefits - Code reusability, Supports Polymorphism, and Easy maintenance.
9. Limitations - Tight coupling, and Potential for Fragility [ Changes made to Super
   can impact the Child].
10. Inheritance is applicable for both classes and interfaces.
====================================================================================
6. Abstract Class
=================
1. Abstract class is class which has methods with no implementations.It is defined
   using the abstract keyword.
2. Need - To achieve the abstraction.
3. Abstraction - It is a mechanism where abstract class defines what methods must be
   implemented by its subclasses without providing the full implementation itself.
4. Criteria - Class shouldn't be final. Methods shouldn't be private or static.
5. Objects are not created for the Abstract class as it has methods without implementations.
6. Abstract class can have constructors which is invoked by subclass.
7. Abstract methods in abstract class is used to define the interface for the subclass
   / implementation class.
8. Abstract class can have concrete methods as well.
9. If Subclass doesn't provide implementation, then it should be declared as Abstract.
10. Benefits - Code Reusability, Abstraction, Encapsulation and Polymorphism.
11. Limitations - Cannot be instantiated, Mandatory method implementation, Increased
    complexity and Less Flexibility.
====================================================================================
7. Interface
============
1. Interface is a blueprint / contract which defines set of methods that a class must
   implement. [Any service requirement specification or any contract between the client
    and service provider is called as Interface]
2. Need - To achieve the abstraction.
3. Every method declared inside interface is always public abstract.
4. Every variables declared inside interface is always public static final.
5. Interface can't have instance variables,constructors, or non-static methods.
6. Interface can't be instantiated. They can only be implemented by a class or extends
   another interface.
7. Interface can have constants, abstract methods, default methods, private methods and
   static methods.
8. Benefits - Abstraction, code reusability, Loose coupling, polymorphism, define contract.
9. Marker Interface - Interface with no method declarations. It provides the information
   about the implementation class.
   Ex: Serializable, Cloneable, and RandomAccess interfaces.
10. Functional Interface - Interface with single abstract method can be used with
    lambda or method reference.
11. Interface can extend multiple interfaces.
12. Interface used in serialization where it marks the class as serializable.
13. Adapter pattern allows incompatible interfaces to work together by providing the
    bridge between them.
====================================================================================
8. Composition & Aggregation [AKA HAS-A Relation]
============================
1. Composition and Aggregation provides the "Has-A" relationship between objects in Java.
2. Composition has strong relationship between classes where the parent (containing
   object) is responsible for the lifetime of the child(contained object).
3. Aggregation has weak relationship between classes where the parent (containing object)
   is not responsible for the lifetime of the child( contained object) and both can exists
   independently.
4. In composition, the contained object is often initialized inside the containing class
   constructor.
5. Benefits - Improved object lifecycle management, modular design, and encapsulation.
6. Drawback of Composition - Excessive composition can tightly couple the objects.
7. Composition is implemented using Constructor / Setter injection, whereas Aggregation
   is implemented using member variables or method parameters.
8. Composition can be used as an option in place of inheritance.
9. If we want the part of the functionality of the class then we should go for the Has
   A relationship, whereas if complete functionality is needed then we should use Is-A.
====================================================================================
9. Cohesion & Coupling
======================
1. Cohesion refers to the degree to which the elements of the module belongs together.
   It measures the bonding between the data and methods of a class.
2. Coupling refers to how tightly modules are dependent on each other. It measures the
   bonding between the modules [Classes].
3. High Cohesion can be achieved by following SRP design pattern, grouping related functions
   and data together. Using private methods for functionality that is not meant to expose.
4. Low coupling can be achieved by following Interface based programming, Dependency injection
   and using design patterns like observer pattern or factory pattern.
5. Advantages of High Cohesion and Low Coupling - Code Maintainability, Understandability,
   flexibility, testability, robustness and scalability.
6. Recommended is always High Cohesion and Low Coupling. Reverse is not advisable.
====================================================================================
10. Constructor
===============
Constructor [ Special type of Method]
1. Constructor are special type of method, which is used to initialize the Objects.
   [Instance variables] It is called / invoked implicitly when an instance of class
   is created.
2. Significance - Have same name as class name and doesn't have return type.
3. Types - Default and Parameterized.
4. Criteria - Constructor can't be final|static|abstract.
5. Constructors can be overloaded. It allows for creation of Objects in different ways.
6. Constructors can't be overridden.
7. "this()" method is used for constructor chaining which means we can call a constructor
   from another constructor using this keyword and it should be first statement in it.
8. Constructor can throw exception.
9. "super()" method is used to call the superclass constructor from the subclass constructor.
10. Private constructor are allowed and its often used in Singleton Design Pattern.
11. The only applicable modifiers for Constructors are Public, Private, Protected
    and Default.
12. If we are not having any constructor, then only compiler will generate the default
    constructor.
====================================================================================
11. Type Casting
================
1. Type casting refers to converting the data of one type to another.
   [Treating the object of one class as another class]
2. Types - UpCasting and DownCasting.
3. Criteria - Inheritance relationship is required.
4. UpCasting - Casting from a subclass to a superclass. Safe and done by compiler.
5. DownCasting - Casting from a superclass to a subclass. Risk and needs explicit
   casting by programmer. It might throw ClassCastException if object being casted
   is not instance of subclass.
6. InstanceOf operator is used to check whether the object is an instance of class/
   interface. It is used in DownCasting before performing the casting, it is used
   to check that object is instance of the class / interface.
7. Object TypeCasting is ONLY for reference data types not for primitives.
8. Converting of Integer Object to Double requires 2 steps.
   1. Integer object to int primitive using Unboxing
   2. Int primitive to Double object using AutoBoxing
9. Examples
   Superclass obj = new Subclass(); // Upcasting
   SuperClass obj1 = new SubClass();
   SubClass obj2 = (SubClass)obj1; // Down-casting
====================================================================================
12. Static Block [First code block to be executed]
================
1. Block of code enclosed with static keyword is called as Static Block.
   It is implicitly [automatically] executed by JVM at the time of class loading.
2. Purpose - static variables initialization or one time initialization task.
3. If error occurred in static block then class load will not load properly and
   throws an error.
4. Usage - Initializing static variables, Loading resources, and Initializing
   constants.
5. Non-static member are not allowed inside the static block. Only Static Members
   allowed.
6. Its safer to initialize the final static variables inside static block.
7. We can use Try Catch inside the static block.
8. Static block executes first than the static variables.
9. Until Java 1.6 even can use static blocks without main() method.
====================================================================================
13. Static Control Flow
=======================
1. Static control flow refers to the sequence of execution of static blocks,
   static variables initialization and static method invocation.
2. Static variables affects the static block execution if its called in static
   block and not initialized.
3. Forward Reference - When a static block tries to access a static variable or
   method that is declared later in class.
4. With Inheritance relation, the Parent class static members are initialized /
   loaded first then followed by the Child class static members.
5. Whenever we are executing a Java class, the following sequence of steps will be
   executed as part of the static control flow.
   1.	Identification of static members from top to bottom.
   2.	Execution of static variables assignments and static blocks from top to bottom.
   3.	Execution of main method.
====================================================================================
14. Instance Blocks & Control Flow
==================================
1. Instance Control Flow refers to the initialization of instance variables,
   instance initialization blocks, and constructor invocations when an object
   of a class is created.
2. Purpose - Used to initialize the instance variables for every object creation.
   It can also perform initialization tasks which can't done in Constructors.
3. If error is thrown in instance blocks then object creation process fails,
   and error message is printed indicating the error.
4. Instance initialization blocks will be executed each time when an object
   of a class is created.
5. With Inheritance relation, the Parent class instance members are initialized
   first then followed by the Child class instance members.
6. Forward Reference - When a instance block tries to access a instance variable or
   method that is declared later in class.
7. Instance blocks can access both static variables and methods because the object
   has access to both instance and static members of a class.
8. In instance control flow, the following sequence of the events will be executed.
   1.	Identification of Instance members from top to bottom.
   2.	Execution of Instance variables assignments and instance blocks from top to
        bottom.
   3.	Execution of Constructor.
====================================================================================
15. Loops
=========
1. 3 Types of loops available in Java. For loop, While loop and Do-While loop.
2. The break statement terminate the loop prematurely, based on a condition.
3. The continue statement skips the current iteration of the loop.
4. For loop is traditional loop which gives more control on the iteration/execution.
5. For Each loop AKA enhanced for loop which is used for Arrays / Collections. The
   target element in for each loop should be Iterable object.
6. Use 'for' loop when you know the number of iterations beforehand or need to iterate
   over a range of values.
7. Use 'while' loop when you don't know the number of iterations beforehand or when you
   need to check a condition before each iteration.
8. Use 'do-while' loop when you want to execute the loop body at least once, regardless
   of the condition being true.
9. In for loop, if we don't take the condition value explicitly then compiler will
   assign it as true and the loop will run infinite times.
====================================================================================
16. Selection Statements
========================
1. Two types of conditional selection statements available in Java.
   1. if else
   2. switch
2. If block executes if condition is true otherwise the else block will execute.
3. Switch - It works based on matching of the case. If the case is matched then
   corresponding block will be executed. If none is matched then default case is
   executed.
4. If statement is used when the conditions are complex or when you need to check
   inequality.
5. Switch statement is used when you have fixed set of values to compare and
   conditions are simple.
6. Short-circuit evaluation is a behaviour in which the second operand of logical
   && or || operator is evaluated only if the result of the overall expression is
   not determined by first operand.
7. If statement can be represented in shorthand way by using the Ternary operator.
8. The allowed argument types for the switch statements are byte, short, char, int,
   Byte, Short, Character and Integer, Enum  and String types also allowed.
====================================================================================
17. Transfer Statements
=======================
1. 3 Types of Transfer Statements available in Java.
   1. Break, 2. Continue, and 3. Return
2. Break - Used to exits the loop prematurely based on condition.
   Used to exits the switch statement.
3. Continue - Used to skip the remaining code in the current iteration
   and moves on to the next.
4. Return - Used to exits a method and optionally returns a value.
5. A labeled break statement allows you to break out of a nested loop
   directly to a specific outer loop.
6. A labeled continue is used to skip the current iteration of an outer loop
   when working with nested loops.
7. Drawbacks - Makes code harder to read and maintain. The logic flow
   becomes less clear.
====================================================================================
18. Exception Handling
======================
1. An Exception is an event that disrupts the normal flow of program's instruction during
   the execution.
2. Throwable is a base class for all exceptions and errors. It has 2 subclasses such as
   Exception and Error.
3. Types - Checked and Unchecked Exceptions
   Example: Checked - IOException and SQLException [Compile Time]
			Unchecked - NullPointerException and ArrayIndexOutOfBoundsException [Runtime]
4. Try-Catch block is used to handle the exception in Java.
5. The code which throws exception is taken inside the Try block and Catch is used to
   handle the exception if its thrown.
6. Finally block is used to execute the important code, like closing resources [files /
   DB connections]. Irrespective of exception thrown or not, finally will execute.
7. throw keyword is used to explicitly to throw an exception within the method.
   [To hand over the user created exception object to the JVM manually.]
8. throws keyword is used in method signature to indicate that the method may throw exception.
   [To delegate the responsibility of the exception handling to the caller.]
9. Custom exceptions can be created by extending the Exception class for Checked and Runtime
   Exception class for unchecked.
10. Try-with-resources  can be used in place of Try-Catch block for implicit resources
    management.
11. Exception chaining AKA Exception Wrapping it allows one exception to be nested within
    another. This way, the original exception is preserved while propagate in the call stack.
12. Finally block won't run - If JVM terminates because od OutofMemory Error / ThreadDeath /
    System.exit()

ArrayIndexOutOfBoundsException
NullPointerException
ClassCastException
StackOverFlowError
NoClassDefFoundError
ExceptionInInitializerError
IllegalArgumentException
NumberFormatException
IllegalStateException
Assertion Error
====================================================================================
19. Threads
===========
1. Thread is a lightweight process. It is a separate path of execution within a program.
2. Thread allows concurrent execution of tasks, which enables the program to perform
   multiple operations.
3. Thread can be implemented in 2 ways as below.
   1. Thread Class - By extending a Thread class and overriding its run() method.
   2. By implementing a Runnable interface and by passing the instance of implement class to
      Thread constructor.
4. Thread States - New, Runnable, Blocked, Waiting [Timed Waiting] and Terminated.
5. When we create Thread using Thread Class you can't extend any other class but whereas
   when we implement a Runnable interface we can extend class simultaneously.
6. Start() - It is used to start the execution of a thread. When start() called, JVM
   internally calls the run() method. Thread class start() method is responsible to register
   the thread with Thread scheduler and all other mandatory activities.
7. Join() - It allows one thread to wait for the completion of another thread.
   t1.join(t2) - t1 will wait until the completion of t2.
8. Thread Synchronization - Controlling the access to the shared resources by multiple
   threads. It can be achieved by using synchronized keyword, locks, etc.
9. Deadlock - Its a situation where two or more threads blocked forever, waiting for each
   other to release the resources.
10. Deadlock can be avoided by eliminating the nested locks, ensure lock acquire and release
    in same order by threads and using timeouts when acquiring locks.
11. Process is a self contained program execution environment whereas thread is a unit of
    execution within a process. Process heavy weight and resource intensive. Thread shares
    resources and lightweight.
12. A daemon thread is a thread which runs in background and provide services to other threads.
    Example, Garbage Collector Thread.
13. Synchronization can be achieved by methods, blocks, locks [reentrant locks], etc.
14. ThreadPool - A collection of pre-initialized threads which are ready to perform tasks. It
    reduces the overhead of thread creation and destruction.
15. wait() - makes current thread to wait until another thread invokes notify() /notifyAll()
    method for same object.
	notify() - wakes up single thread which is waiting on the object's monitor.
	notifyAll() - wakes up all the threads that are waiting on the object's monitor.
16. Thread Starvation - It is a condition that occurs when a thread is unable to gain the
    resource access / CPU time because other threads are given priority. It can be prevented
    by implementing fair scheduling policies, such as using reentrant locks with fairness
    enabled.
17. MultiThreading advantages - Make programs more efficient, responsive, handling concurrent
    tasks, improving performance and resource usage.
18. MultiThreading pitfalls - Deadlock, Race condition and excessive thread creation. These
    can be eliminated by proper synchronization, avoiding nested locks, using thread-safe Data
    Structures.
19. Volatile keyword used with variables indicates that value may be changed by multiple
    threads that works concurrently.
20. Livelock - It occurs when threads are actively trying to resolve a conflict but stuck in
    repetitive cycle without making progress.
21. ThreadLocal - It isolates the data for each thread.I.e., each thread has its own copy of
    data and not shared.
22. InheritableThreadLocal - It allows child threads to inherits the data from the parent
    threads.
23. Thread in sleeping / waiting state can be interrupted by calling the interrupt() method.
24. We can prevent a Thread execution [stop thread execution] by using the following methods,
    1. Yield()
    2. Join()
    3. Sleep()

Thread Life Cycle
=================
------------    ------------------    -----------    --------
|New / Born| -> |Ready / Runnable| -> | Running | -> | Dead |
------------    ------------------    -----------    --------
MyThread t = new MyThread() => New Thread
t.start();                  => Thread will get Ready / Runnable
After Thread Scheduler allocates process. Thread will be moved to Running.
After run() method completes.
Thread will be moved to Dead state.
====================================================================================
20. Inner Class [Introduced in Java 1.1]
===============
1. A class can be defined inside another class is called as Inner Class.
2. Inner Class can access the members of the Outer Class including private members.
3. Usage - To logically group classes that are only used in one place.
4. Types of Inner Class as below,
   1. Normal Inner Class
   2. Static Inner Class
   3. Local Inner Class
   4. Anonymous Inner Class
5. Static Inner Class can access only static members of Outer Class whereas Non-Static
   [Inner Class] can access both static and non-static members of the Outer Class.
6. Anonymous Inner Classes are classes without name, they are defined and instantiate
   at same time. They are useful for implementing interfaces / extending classes on fly.
7. The scope of the Inner Class is limited to the scope of the Outer Class.
8. Inner Class can be declared as Private / Protected / Public.
9. Relation between the Outer and Inner class is Has A relation. i.e., Composition /
   Aggregation.
10. Among classes and interfaces, we can declare anything inside anything.
    1. Interface which is declared inside interface is always public and static
       whether we are declaring or not.
    2. Class which is declared inside interface is always public and static whether
       we are declaring or not.
    3. Interface which is declared inside a class is always static but need not be
       public.
====================================================================================
21. Array
=========
1. An Array in Java is a DataStructure that allows you to store the multiple / group
   of values of same type under single variable.
2. The elements / values inside the array can be accessed by index.
3. Elements of the array can be iterated using the for loop / enhanced for loop.
4. Default values of array as below,
   1. Primitive  - [int / float / long / double ] - 0, boolean - false.
   2. Reference - null.
5. A multi-dimensional array in Java is an array of arrays. It is used to
   store elements in tabular form with rows and columns.
6. Sometimes we can declare an array without name, such type of array is called as
   Anonymous array. The main purpose of it, is just for instant use (one time usage).
6. Advantages - Accessing elements will be faster.
7. Limitations - Insertion / Deletion will be slow, and its fixed in size.
====================================================================================
22. Variables
=============
1. A variable is a named memory location which stores data.
2. Criteria - Variable name contain letters / digits / underscore. But,
   can't start with digit. Its case sensitive. It should be camelCase.
3. Types - Local, Instance and Class [Static]
4. Local Variables - Declared inside a method / block / constructor.
   Stored in Stack memory and not initialized with default values.
   Local variables must be initialized before use and don't have access
   modifiers.
5. Instance Variables - Declared inside a class but outside of method /
   block / constructor. Stored in Heap memory and initialized with default
   values when object created. Each instance of class has its own copy of
   instance variables.
6. Class Variables - Declared with a static keyword inside a class but
   outside of method / block / constructor. Stored in Method Area of Heap
   memory and initialized only once. Each instance of  class has share the
   single copy of class variables.
7. Variables in Java are assigned default values based on their data types:
	1. For numeric data types (byte, short, int, long, float, double): 0
	2. For boolean: false
	3. For char: '\u0000' (null character)
	4. For reference types (objects and arrays): null
8. Constant variables can be declared using the final keyword and they MUST
    be initialized at declaration or inside a constructor.
9. Variable scope refers to the region of the program where variables is
    accessible. Its of below 3 types.
	1. Local Scope: Variables accessible only inside the method / block /
	   constructor.
	2. Instance Scope: Variables accessible throughout the program and
	   exists as long as instance [object] exists.
	3. Class Scope: Variables accessible throughout the program and exists
       as lon as the class is loaded into memory.
10. Primitive Variables holds the actual data whereas Reference variables
    stores the memory address that points to the location of the object in
	memory.
11. Shadowing occurs when a variable declared within a certain scope (such as
    a method or block) has the same name as a variable declared in an outer
	scope. The inner variable "shadows" the outer variable, meaning the outer
	variable becomes inaccessible within the inner scope.
	int x = 10; // Outer variable
	void method() {
		int x = 20; // Inner variable shadows the outer variable
		System.out.println(x); // Prints 20
	}
12. Volatile variable is always read directly from and written directly to the
    main memory.
====================================================================================
23. Main Method
===============
   Java 1.6 => Static block execution and NoSuchMethodError.
   Java 1.7 => Error: Main method not found in class Test.
1. main() - It is the entry point of the Java program. The JVM calls the main() to
   execute the Java program.
2. The String[] args is allows to take the cmdline arguments when
3. Criteria - main() don't return value. Can't be private / protected. If its not public
   then JVM can't access main().
4. main() - It can be declared as final but not needed as it already has static so its
   implicitly final.
5. The syntax of main() is public static void main(String[] args), if we change the syntax,
   then the program will fail to execute.
6. main() can be declared with synchronized keyword but its not common and may introduce
   unnecessary overhead.
7. For main method, overloading and inheritance concepts are applicable. But method overriding
   is not applicable instead method hiding is applicable.
8. At runtime, JVM always searches for the main() method with the following prototype.
   a.	Why public, To call by JVM from anywhere.
   b.	Why static, Without the existence of object, JVM has to call this method.
   c.	Why void, main() won’t return anything to JVM.
   d.	Why main name, This is the name which is configured inside the JVM.
   e.	Why String[] args, This is command line arguments. Most commonly used datatype in
        Java is String so only the command line argument takes String array and also String
        datatype can be converted into other datatype easily.
9. Different style of writing main() method.
   public static void main(String[] args)
   static public void main(String[] args)
   public static final void main(String[] args)
   public static synchronized void main(String[] args)
   static final synchronized strictfp public void main(String... we)
====================================================================================
24. Objects Classes
===================
1. A class is a blueprint, while an object is an instance created from that blueprint.
2. Class defines the properties[fields] and behaviours[methods] that object of
   that type will have.[A class defines the structure, while an object holds the actual data.]
3. An Object is an real world entity with its own set of properties and functionalities.
4. An object is an instance of a class which has state and behaviour which is represented
   by its fields and methods.
   Example: A Car object have attributes like Color, Model and Speed.
			A Car object have functionalities like accelerate, break and turn.
5. This keyword is used to refer to current instance. Also to call the Constructor from
   another Constructor.
6. For every object a unique number generated by JVM which is called as HashCode. JVM will use
   hashCode while saving object into Hashing related data structures like hashtable, hashmap and
   hashset, etc.
7. We can use getClass() method to get the runtime class definition of an object.
   public final Class getClass ();
   By using this Class cls object, we can access the class level properties like
   fully qualified name of the class, methods information, constructor information, etc.
====================================================================================
25. String
==========
1. A String in Java is an object that is used to represent a sequence of
   characters.
2. String object can be created in 2 ways - String literals and new operator.
3. StringBuilder is a mutable sequence of characters. Its similar to StringBuffer
   but not synchronized.
4. String is immutable in Java which inherently makes it thread safe.
5. String - Immutable, ThreadSafe, Concatenation using + involve performance overhead
   and can be used when the string is not changed frequently.
6. StringBuffer - Mutable, ThreadSafe as its synchronized, Concatenation using append()
   is efficient. Less in performance when compared with StringBuilder.Used when ThreadSafe
   is required.
7. StringBuilder - Mutable, NOT ThreadSafe, Concatenation using append() is efficient.
   High in performance when compared with StringBuffer.Used when ThreadSafe is NOT required
   and performance is crucial.
8. String str = "Hello"; - Object will be created in SCP only when NO existing object
   present.
9. String str = new String("Hello"); - Object will be created in Heap Memory even though
   similar Object is already present in SCP.
10. SCP - String Constant Pool is a special memory area in Heap Memory where String Literals
    are stored. The String literals are stored among all references in the Program.
11. String class constructors.
		String s = new String ();
        String s = new String (String literal);
        String s = new String (StringBuffer sb);
        String s = new String (char[] ch);
        String s = new String (byte[] b);
====================================================================================
26. Collections
===============
1. Collections in java are a framework that provides an architecture to store and manipulate
   group of objects.
2. Collection is an interface whereas Collections is a class.
3. Important collection interfaces - List, Map, Set and Queue.
4. List - Order collection which contains duplicates.
   Set - Collection that doesn't allow duplicates.
   Map - Its a Key Value pair collection.
   Queue - Collection used to hold elements before processing.
5. HashMap uses hashtable to store the KeyValue pairs. It uses the hashcode of the Keys to
   store and retrieve the values quickly.
6. HashMap is preferred over HashTable. HashTable is used for legacy collection where Thread
   safety is strict requirement. ConcurrentHashMap is used nowadays.
7. HashMap uses iterator which is fail fast i.e., we can't modify elements while iterating.
   If we do, will get ConcurrentModificationException.
8. HashTable uses enumerator which is failsafe i.e., we can modify elements while enumerating
   and we don't get ConcurrentModificationException.
9. Comparable interface is used for sorting elements in natural sorting order.
10. Comparator interface is used for custom sorting of elements.
11. List and Set can be made synchronized by using the below methods.
    Collections.synchronizedList(new ArrayList());
	Collections.synchronizedSet(new HashSet());
	Collections.synchronizedMap(new HashMap());
12. Benefits - Consistency, Reusability and Extensibility.
13. ArrayList uses dynamic array for storage, faster access of elements.
14. LinkedList uses doubly linked list for storage, faster insertion and deletion.
15. HashSet uses hashtable for storing elements. Doesn't guarantee of order.
16. TreeSet uses tree based structure to store elements. Maintains sorted order.
17. LinkedHashSet uses HashTable for storage. Preserves insertion order.
18. Dequeue interface represents double ended queue, which allows insertion and deletion
    of elements from both ends.
19. Iterator - Is an object in Java allows you to traverse the Collection [List/Set/Map].
20. HashSet internally uses HashMap to store elements. It ensures uniques by checking the
    hashcode of element already exists in set. If hashcode already exists, it further checks
	for equality using equals() method.
21. Iterator is used for iterating over collection in forward direction.
    ListIterator is used for iterating over the list in both directions.
	Enumerator is an old interface used with legacy collections.
====================================================================================
