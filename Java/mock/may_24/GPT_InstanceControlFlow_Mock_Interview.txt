What is an Instance Initialization Block (IIB) in Java?

Instance Initialization Block is a block od code which is used to initialize the instance variables
and objects. The IIB invoked when the instance of the class is created.

How is an Instance Initialization Block different from a Static Initialization Block?

Instance Initialization Block is used to initialize only instance variables and objects, aslo it 
invoked during the creation of objects of a class whereas Static Initialization Block is used to 
initialize only static variables and objects, also the SIB is invoked before the creation of object
for the class i.e., when the class is loaded into memory. One more thing, SIB has keyword static 
whereas IIB don't have any keyword. Also, the IIB will be executed for each instance created whereas
SIB will be executed only once.

Can you provide an example of an Instance Initialization Block in Java?

public class IIBDemo {
	int i;
	
	{
		i = 10;
		System.out.println("Instance Initialization Block");
		System.out.println(i);
	}
	
	public static void main(String[] args) {
		IIBDemo demo = new IIBDemo();	
	}
}

When does an Instance Initialization Block execute?

An Instance Initialization Blcck will execute during the time of creation of instance(object) of the class 
i.e., after the initialize of instance variables and before the invocation / execution of constructors.

Can you have multiple Instance Initialization Blocks in a Java class? If yes, in what order do they execute?

Yes. We can have multiple Instance Initialization Blocks in Java, they execute in the order they appear in the
code.

Here, in the below code, we have 2 IIB's. the Instance Initialization Block2 is executed first and then followed 
by Block1 as they have appeared in the same order in the code.

public class IIBDemo {
	int i;
	
	{
		System.out.println("Instance Initialization Block2");
	}
	
	{
		i = 10;
		System.out.println("Instance Initialization Block1");
		System.out.println(i);
	}
	
	public static void main(String[] args) {
		IIBDemo demo = new IIBDemo();	
	}
}

How are Instance Initialization Blocks useful in Java programming?

Instance Initialization Blocks are used to initialize the instance Objects. Apart from this, it can used to 
initialize other common task which is shared by all objects. Instance Initialization Blocks will be executed
for each created objects. 

Can an Instance Initialization Block access instance variables directly?

Yes. Instance Initialization Blocks can access the instance variables directly. The below code illustrate
the same.

public class IIBDemo {
	int i;
	{
		i = 10;
		System.out.println("Instance Initialization Block1");
		System.out.println(i);
	}
	
	public static void main(String[] args) {
		IIBDemo demo = new IIBDemo();	
	}
}

Is it possible to access static variables or methods from within an Instance Initialization Block?

Yes. We can access the static variables and methods from with an Instance Initialization Block inaddition
to the instance variables and methods.

public class IIBDemo {
	int i;
	static int j = 20;
	{
		i = 10;
		System.out.println("Instance Initialization Block1");
		System.out.println(i);
		System.out.println(j);
		display();
	}
	
	public static void display() {
	    System.out.println("Static Method");
	}
	
	public static void main(String[] args) {
		IIBDemo demo = new IIBDemo();	
	}
}

What happens if an exception occurs inside an Instance Initialization Block?

When an exception occurs inside the Instance Initialization Block, it will fail the creation of Object and
exeuction of the program has stopped by throwing the error message with the cause.

The below code illustrate the exception scenario.

public class IIBDemo {
	int i;
	{
		i = 10;
		System.out.println(i/0);
		System.out.println("Instance Initialization Block1");
		System.out.println(i);
	    
	}
	
	public static void main(String[] args) {
		IIBDemo demo = new IIBDemo();	
	}
}

Output
======
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at IIBDemo.<init>(IIBDemo.java:5)
	at IIBDemo.main(IIBDemo.java:12)
	
The below code is used to handle the exception which got raised.

public class IIBDemo {
	int i;
	{
		i = 10;
		try{
		System.out.println(i/0);
		}catch(ArithmeticException ex){
		    System.out.println("Exception Captured");
		}
		System.out.println("Instance Initialization Block1");
		System.out.println(i);
	    
	}
	
	public static void main(String[] args) {
		IIBDemo demo = new IIBDemo();	
	}
}
	
Are Instance Initialization Blocks inherited by subclasses in Java?

Yes. Whenever we inherit the superclass in subclass, and try to create the object for subclass
then, the Instance Initialization Block of superclass is executed first and then followed by
subclass Instance Initialization Block.

public class IIBDemo {
	
	public static void main(String[] args) {
		Sub sub = new Sub();	
	}
}

class Super {
    
    int i;
	{
		i = 10;
		System.out.println("SuperClass - Instance Initialization Block");
		System.out.println(i);
	    
	}
}

class Sub extends Super {
    
    int j;
	{
		j = 20;
		System.out.println("SubClass - Instance Initialization Block");
		System.out.println(j);
	    
	}
}

If suppose, the subclass don't have the IIB. Then superclass IIB can be inherited by SubClass.

public class IIBDemo {
	
	public static void main(String[] args) {
		Sub sub = new Sub();	
	}
}

class Super {
    
    int i;
	{
		i = 10;
		System.out.println("SuperClass - Instance Initialization Block");
		System.out.println(i);
	    
	}
}

class Sub extends Super {

}

==========================================================================

Your answers provide a solid understanding of Instance Initialization Blocks (IIBs) in Java. Here's some feedback:

Correctness: Your answers are mostly correct. You've provided accurate explanations of what IIBs are, how they differ from static initialization blocks, and their behavior.
Clarity: Your explanations are clear and easy to follow. You've used examples effectively to illustrate the concepts.
Completeness: You've covered all the key aspects of IIBs, including their purpose, execution order, accessibility, exception handling, and inheritance.
Improvement: One minor improvement could be to include a bit more detail on the scenario where an exception occurs inside an IIB. You've handled it by showing how to catch the exception, but you could also mention that the object creation would fail in such cases.
Overall, your answers demonstrate a good understanding of Instance Initialization Blocks. Well done! 