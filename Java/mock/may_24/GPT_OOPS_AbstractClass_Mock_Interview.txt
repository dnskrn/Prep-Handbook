What is an abstract class in Java?

An Abstract Class is kind of a blue print, which provides the contract details and those are have to
be implemented by the implementation classes. The implementation classes should adhere to the contract
defined by the abstract class when provide the implementations. The abstract classes are used to achieve
the abstraction. It is possible to achieve 0 to 100% abstraction using the abstract class.

How do you declare an abstract class in Java?

An abstract class can be declared using the abstract keyword as below.

public abstract class Demo {
    
    public abstract void display();
}

Can you instantiate an object of an abstract class? Why or why not?

No, we can't instantiate an abstract class which means we can't create the object for an abstract class.
Becuase the abstract class are not complete, i.e., the abstract class contain the abstract methods which
are only defined and not implemented fully or not have method body. If we try to create an object for an
abstract class, then compile time error should be thrown.

What is the purpose of an abstract method in an abstract class?

The abstract method in the abstract class is used to define the contract of the abstract classes, and which
should be implemented by the implementation classes. The abstract methods are only defined in the abstract
class and those were implemented by the implementation class. The abstract method is used to provide the 
abstraction i.e., the implementation details are hided or not shown to the outside class/ world. Only the
method definition is visible to the outside world.

How do you declare an abstract method within an abstract class?

An abstract method declared using the abstract keyword as below.

abstract class Demo {
    
    public abstract void display();
}

public class DemoImplementation extends Demo {
    
    public void display() {
        System.out.print("Implemented Display");
    }
    
    public static void main(String[] args){
        DemoImplementation demo = new DemoImplementation();
        demo.display();
    }
}

Can an abstract class have concrete methods? If yes, how are they different from abstract methods?

Yes. An abstract class can contain concrete methods. The concrete methods are methods which has method
body whereas the abstract methods don't have method body.

abstract class Demo {
    
    public abstract void display();
    
    public void show() {
        System.out.println("Abstract Concrete Show");
    }
}

public class DemoImplementation extends Demo {
    
    public void display() {
        System.out.println("Implemented Display");
    }
    
    public static void main(String[] args){
        DemoImplementation demo = new DemoImplementation();
        demo.display();
        demo.show();
    }
}

Can an abstract class extend another abstract class?

Yes. An abstract class can extend another abstract class and which promotes the inheritance hierarchy and 
code reusability.

abstract class Demo1 {
    
    public abstract void greet();
    
    public void show() {
        System.out.println("Abstract Concrete Show");
    }
}

abstract class Demo2 extends Demo1 {
    
    public abstract void display();
    
}


public class DemoImplementation extends Demo2 {
    
    public void greet() {
        System.out.println("Implemented Greet");
    }
    
    public void display() {
        System.out.println("Implemented Display");
    }
    
    public static void main(String[] args){
        DemoImplementation demo = new DemoImplementation();
        demo.greet();
        demo.display();
        demo.show();
    }
}

How is an abstract class different from an interface in Java?

1. An abstract class can contain both concrete and abstract methods whereas an interface
can contain only abstract methods.
2. An abstract class can be used to achieve partial as well as full abstraction whereas
an interface can be used to achieve only full abstraction.
3. An abstract class don't support loose coupling as it has dependency with implementation
class whereas an interface can support the loose coupling.
4. An abstract can't support multiple inheritance whereas an interface can support multiple
inheritance.
5. An abstract class can't be instantiated whereas an interface can also be can't instantiated.

Can a class extend multiple abstract classes?

No. In Java, one class can extend only one class at a time, so an abstract class can extend only
one abstract class at a time and not multiple abstract classes. If we try to do so, then it will
throw compile time error.

Can an abstract class implement an interface?

Yes. An abstract class can implement an interface as below.

interface Demo1 {
    
    public abstract void greet();

}

abstract class Demo2 implements Demo1 {
    
    public abstract void display();
    
       public void show() {
        System.out.println("Abstract Concrete Show");
    }
    
}

public class DemoImplementation extends Demo2 {
    
    public void greet() {
        System.out.println("Implemented Greet");
    }
    
    public void display() {
        System.out.println("Implemented Display");
    }
    
    public static void main(String[] args){
        DemoImplementation demo = new DemoImplementation();
        demo.greet();
        demo.display();
        demo.show();
    }
}

Can an abstract class have constructors? If yes, how are they used?

Yes, an abstract class can contain constructors. It is used to initialize the members of
the abstract class. Anyway, abstract class can't be instantiated so the constructors of the 
abstract class is only invoked by the implementation class. When we create an object of 
implementation class the implementation class constructor will be invoked and which will 
invoke the abstract class constructor as below.

abstract class Demo {
    
    String data;
    
    public Demo() {
        data = "Hello";
        System.out.println("Hello from Abstract Class");
    }
    
    public abstract void display();
    
       public void show() {
        System.out.println("Abstract Concrete Show");
    }
    
}

public class DemoImplementation extends Demo {
    
    public DemoImplementation() {
        super();
        System.out.println("Hello from Implemented Class");
    }
    
    public void display() {
        System.out.println("Implemented Display");
    }
    
    public static void main(String[] args){
        DemoImplementation demo = new DemoImplementation();
        demo.display();
        demo.show();
    }
}

How do you implement an abstract class in a concrete subclass?
No Idea. I believe its not allowed in Java. Please correct me If I'm wrong.

What happens if you don't implement all the abstract methods from an abstract class in a concrete subclass?

If we don't implement all methods from abstract class in concrete subclass, then compile time error will be
thrown. To fix the CTE, either we have to implement all the abstract methods in subclass or we have to make
the concrete subclass as abstract class.


Approach 1
==========
abstract class Demo {
 
    public abstract void display();
        
    public void show() {
        System.out.println("Abstract Concrete Show");
    }
        
}

public class DemoImplementation extends Demo {
    
    public void display() {
        System.out.println("Implemented Display");
    }
    
    public static void main(String[] args){
    
        DemoImplementation demo = new DemoImplementation();
        demo.display();
        demo.show();
    }
}

Approach 2
==========
abstract class Demo {
 
    public abstract void display();
    
    public abstract void greet();
        
    public void show() {
        System.out.println("Abstract Concrete Show");
    }
        
}

abstract class DemoImpl extends Demo {
    
    public void display() {
        System.out.println("Implemented Display");
    }
    
}

public class DemoImplementation extends DemoImpl {
    
    public void greet() {
        System.out.println("Implemented Greet");
    }
    
    public static void main(String[] args){
    
        DemoImplementation demo = new DemoImplementation();
        demo.display();
        demo.greet();
        demo.show();
    }
}

Can you provide an example of when to use an abstract class in Java?

Yes. when we want to have partial abstraction which means the abstract can have the concrete
class and abstract class. Lets say we have an Cab application, where it has different modules
and this scenario, the passengers details should be abstracted from others so we have use it 
as abstract method for passengers details functionality whereas the cab details which is common
for all passengers and it don't need to be abstracted as it should accessed by all passengers
to book the cab. So, cab details functionality can be created as concrete method. In this kind
of scenarios, or in similar application / other applications we can use abstract class.

abstract class CabApp {
 
    public abstract void passengerDetail();

    public void cabDetail() {
        System.out.println("Cab Details");
    }
        
}

public class Passenger extends CabApp {
    
    public void passengerDetail() {
        System.out.println("Passenger Details");
    }
    
    public static void main(String[] args){
        Passenger passenger = new Passenger();
        passenger.passengerDetail();
        passenger.cabDetail();
    }
}

What are some key considerations when designing an abstract class in Java?

Key Considerations
==================
1. Only functionality / methods which needs abstraction should be declared as abstract.
2. Common utility functionality / method can be declared as concrete.
3. We can have constructor, but we have use it carefully.
4. We should make sure it promotes inheritance and improves code reusability.
5. The abstract class should be declared with abstract keyword.
6. The abstract method should be declared with abstract keyword and shouldn't have method body.
7. The implementation class should implement all abstract methods to provide implementation else
have to mark it as abstract and some other class should implement the details.

How does an abstract class contribute to achieving abstraction and code reusability in Java?

An abstract class contribute in achieve 0 to 100% abstraction i.e., an abstract class has the facility
to have both concrete and abstract methods which provides the partial abstraction and also it has the 
ability to have only abstract methods too which provides the full abstraction i.e., in both cases the 
implementation class should provide implementation details and which is hided from the outside world.
When we do abstraction, it is being done with help of inheritance concept and when we have inheritance
in place, it helps in the code reusability where if suppose the implement class needs the concrete methods
and it can access those concrete methods and this way it promotes code reusability.

Can abstract classes be used for polymorphism in Java? If yes, how?

Yes. Abstract classes are used for polymorphism in Java, i.e., it can be used in dynamic polymorphism where
the abstract class's abstract methods are overriden in implementation classes and implemented. Thisway, it 
is used for polymorphism.

How does method overriding work with abstract classes?

In abstract class, we have abstract methods declared and those were implemented in implementation classes. The
implementation classes extends the abstract class and overriden the abstract methods to provide implementation.

What are some advantages and disadvantages of using abstract classes in Java?

Advantages
==========
1. Achieve 0 to 100% abstraction
2. Can have both concrete and abstract methods
3. Can have constructors too
4. Can be used to achieve polymorphism
5. Can achieve code reusability

Disadvantages
=============
1. Excessive use of abstract class makes hard dependency
2. If abstract class doesn't implemented properly leads to abstraction leaks

Can you explain the concept of template method pattern in the context of abstract classes?
I forgot the concept. Please provide the answer.

===================================================

You've covered a wide range of aspects regarding abstract classes! Let's go through your answers:

What is an abstract class in Java?
You've provided a comprehensive definition, mentioning its role as a blueprint and its relationship with implementation classes.
How do you declare an abstract class in Java?
Your example demonstrates the correct syntax for declaring an abstract class.
Can you instantiate an object of an abstract class? Why or why not?
You've correctly stated that abstract classes cannot be instantiated due to their incomplete nature.
What is the purpose of an abstract method in an abstract class?
You've explained that abstract methods define the contract that implementation classes must adhere to.
How do you declare an abstract method within an abstract class?
Your example demonstrates the correct syntax for declaring an abstract method within an abstract class.
Can an abstract class have concrete methods? If yes, how are they different from abstract methods?
You've correctly mentioned that abstract classes can have concrete methods, distinguishing them from abstract methods by their implementation.
Can an abstract class extend another abstract class?
You've provided a correct example illustrating that abstract classes can indeed extend other abstract classes.
How is an abstract class different from an interface in Java?
You've highlighted key differences between abstract classes and interfaces, covering various aspects such as method implementation and multiple inheritance.
Can a class extend multiple abstract classes?
You've correctly stated that Java does not support multiple inheritance, so a class cannot extend multiple abstract classes.
Can an abstract class implement an interface?
Your example demonstrates that an abstract class can implement an interface.
Can an abstract class have constructors? If yes, how are they used?
You've correctly explained that abstract classes can have constructors, which are invoked by subclasses but cannot be directly instantiated.
How do you implement an abstract class in a concrete subclass?
You've mentioned that you believe it's not allowed in Java. However, it is indeed allowed, as demonstrated in your subsequent examples.
What happens if you don't implement all the abstract methods from an abstract class in a concrete subclass?
You correctly stated that failing to implement all abstract methods in a concrete subclass results in a compile-time error.
Can you provide an example of when to use an abstract class in Java?
Your example illustrates a scenario where abstract classes are used to model partial abstraction in a cab application. It effectively demonstrates the concept.
What are some key considerations when designing an abstract class in Java?
You've listed several important considerations, such as choosing which methods to make abstract, ensuring proper inheritance, and promoting code reusability.
How does an abstract class contribute to achieving abstraction and code reusability in Java?
You've explained how abstract classes facilitate both partial and full abstraction and promote code reusability through inheritance.
Can abstract classes be used for polymorphism in Java? If yes, how?
You correctly stated that abstract classes can be used for polymorphism, particularly in achieving dynamic polymorphism through method overriding.
How does method overriding work with abstract classes?
You've provided a brief explanation of how method overriding works in the context of abstract classes, indicating that implementation classes override abstract methods.
What are some advantages and disadvantages of using abstract classes in Java?
You've listed several advantages and disadvantages, covering aspects such as abstraction levels, code dependency, and potential issues with improper implementation.
Can you explain the concept of template method pattern in the context of abstract classes?
You mentioned that you forgot the concept. The template method pattern involves defining the skeleton of an algorithm in an abstract class, with specific steps implemented by subclasses. It's a form of behavioral design pattern.
Overall, your responses demonstrate a solid understanding of abstract classes in Java!