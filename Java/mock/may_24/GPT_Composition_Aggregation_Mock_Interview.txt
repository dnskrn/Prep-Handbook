Can you explain the difference between composition and aggregation in Java?

Composition and Aggregation are 2 concepts / approaches available in Java. It denotes the relationship between
the classes in Java.

Composition
1. Strong relation between the classes.
2. The containing object can't be exist without the existence of the contained object.
3. It has tight coupling between the classes.

Aggregation
1. Week relation between the classes.
2. The containing object can exists independently of the contained object.
3. It has the loose coupling between the classes.

When would you choose composition over aggregation, and vice versa?

When we are going to design the classes and those are going to be strictly depent on each other then Composition
can be used becuase the Aggregation provides the less dependencies between the classes.
So, its based on our requirement, 
if the requirement demands the tight relationship between the classes then Composition is good choice.
if the requirement demands the loose relationship between the classes then Aggregation is good choice.

Provide an example scenario where you would use composition.

Let's say we have scenario to develop the Car details application. For that, we will have to create the classes
to store the details.
For this application, we will need 2 classes primarily. One is Engine Class and the other one is Car Class.

class Engine {

	public String engineType;
	
	public Engine(String engineType) {
		this.engineType = engineType;
	}
	
	public void getEngineType(){
		System.out.println(engineType);
	}
}

class Car {

	private Engine engine;
	
	public Car(String engineType) {
		this.engine = new Engine(engineType);
	}
	
	public void getCarEngine() {
	    engine.getEngineType();
	}
	
}

public class CompositionDemo {

	public static void main(String[] args) {
		Car car = new Car("InlineTurboCharge");
		car.getCarEngine();
		
	}
}

In the provided example scenario, the Car class is composed of an Engine because the Engine object is an essential part of the Car object's existence and functionality. Let's break it down:

Essential Dependency: In a real-world scenario, a car cannot function without an engine. The engine provides the power necessary for the car to move. Therefore, the Car class depends on the Engine class to fulfill its purpose.
Direct Ownership: In composition, the container class (in this case, Car) directly owns the contained class (the Engine). The Car class creates an instance of the Engine class within itself, and the Engine object's lifecycle is tightly coupled with the Car object's lifecycle. This means that when a Car object is created, an Engine object is also created, and when the Car object is destroyed, the Engine object is also destroyed.
Unified Interface: From an external perspective, the Car class presents a unified interface that includes the functionality of both the Car itself and the Engine it contains. This means that clients interacting with a Car object don't need to know the internal details of how the Engine works; they only need to know how to interact with the Car.
Composition Relationship: The relationship between the Car and Engine classes is considered composition because the Car class is composed of an Engine, and the Engine is an integral part of the Car. Without the Engine, the Car cannot fulfill its purpose, and there is a strong ownership relationship between the two classes.
In summary, the Car class is composed of an Engine because the Engine is an essential part of the Car object's functionality, the Car directly owns the Engine, and the two classes have a tightly coupled relationship where the lifecycle of the Engine is dependent on the Car. This relationship is considered composition in object-oriented design.

Explain a real-world scenario where aggregation would be beneficial.

Aggregation is beneficial when we have to design classes with loose coupling / relation between them. Aggregation follows as HAS-A 
relation between the classes.

Lets take a real word scenario of Library management application. Where it has Books and Library as 2 primarily used classes.

class Books1 {

    private String bookTitle;
	
	public Books1(String bookTitle){
		this.bookTitle = bookTitle;
	}
	
	public String getBookTitle() {
		return bookTitle;
	}
	
}

class Library1 {

    private List<Books1> books1;

	public Library(){
		this.books1 = new ArrayList<>();
	}
    
	public void addBook(Books1 book) {
		books1.add(book);
	}
    public void getBooksInLibrary() {
        books1.stream().forEach(e -> System.out.println(e.getBookTitle()));
    }
}

public class AggregationDemo {

    public static void main(String[] args) {
        Library1 library1 = new Library1();
        library1.addBook(new Books1("Java Programming"));
		library1.addBook(new Books1("Python Programming"));
		library1.getBooksInLibrary();
		Books1 books = new Books1("JSP");
		System.out.println(books.getBookTitle());
    }
}

In the provided example scenario of a library management system, the relationship between the Library and Books classes is an aggregation relationship. Let's delve deeper into why this relationship is considered aggregation:

Independent Existence: In a real-world library, books can exist independently of the library itself. Books can be created, borrowed, returned, and exist outside the context of any specific library. Similarly, in our software model, the Books class can be instantiated and used without necessarily being associated with a Library.
Loose Coupling: The Library class manages a collection of Books, but the existence of the library does not depend on any specific book. A library can have books added to it or removed from it, and it can continue to function regardless of the presence or absence of specific books. This loose coupling between the Library and Books classes is characteristic of aggregation.
Ownership Relationship: While the Library class manages a collection of Books, it does not own the Books in the same way that a composite object owns its components. In aggregation, the contained objects (the Books) can exist independently and can be shared among multiple containing objects (libraries). The Library class holds references to Books, but it does not control the lifecycle of the Books.
Unified Functionality: The Library class provides functionality for managing and accessing a collection of Books. It may offer methods for adding books, removing books, searching for books, and so on. However, it does not define the behavior of the Books themselves; that responsibility lies with the Books class. The Library class aggregates Books to provide a unified interface for interacting with them.
Multiplicity: In aggregation, a single object of one class can be associated with multiple objects of another class. In our example, a Library can contain multiple Books, and each Book can be associated with multiple libraries. This multiplicity further highlights the aggregation relationship.
In summary, the relationship between the Library and Books classes is considered aggregation because the Library class manages a collection of Books without owning them, there is loose coupling between the classes, and the Books can exist independently of any specific Library. This aggregation relationship accurately models the real-world scenario of a library management system.

How do you implement composition and aggregation in Java classes?

Composition and Aggregation can be implemented in Java by having the instance of the contained object inside the containing class.

Discuss the importance of proper management of object lifetimes in composition and aggregation.

Yes. When it comes to lifetime of objects in Composition, it depends on the containing class. When the containing class is no longer 
required and eligible for GC, then the contained object will also get destroyed. Because the lifetime of contained object depends on
containing object in Composition.

When it comes to lifetime of objects in Aggregation, it doesn't depends on the containing class. When the containing class is no longer 
required and eligible for GC, then also the contained object will be available to access. Because the lifetime of contained object doesn't 
depends on containing object in Aggregation. So, proper resource clean up and object lifetime management is needed for both the 
containing and contained objects.