Questions
=========
1. What is a class in Java?
A class in Java is a blueprint or template for creating objects. It defines the properties
(fields) and behaviors (methods) that objects of that type will have.
Example: The Car class would define the attributes and methods that all Car objects will share.

2. What is an object in Java?
An object is a real-world entity with its own set of properties (attributes) and functionalities
(behaviors). In Java, objects are instances of classes.
An object is an instance of a class. It has state and behavior, represented by the fields
(variables) and methods defined in its class.
Example: A Car object might have attributes like color, model, and speed. It could have
functionalities like accelerate, brake, and turn.

3. What is the this keyword in Java?
The this keyword in Java refers to the current instance of the class. It can be used to
refer to instance variables and methods of the current object, differentiate between instance
variables and local variables with the same name, and invoke constructors from other
constructors in the same class.

4. What are the four pillars of Object-Oriented Programming (OOP) in Java?
1. Encapsulation: Bundles data (attributes) and methods (behaviors) together within a class,
protecting data from direct access.
2. Inheritance: Allows creating new classes (subclasses) that inherit properties and behaviors
from existing classes (superclasses).
3. Polymorphism: Enables objects of different classes to respond differently to the same method
call.
4. Abstraction: Focuses on essential details, hiding implementation complexity by providing
interfaces or abstract classes.

5. Difference between an object and a class?
1. A class is a blueprint, while an object is an instance created from that blueprint.
2. A class defines the structure, while an object holds the actual data.
3. You can have multiple objects from the same class.

6. Can you have a class without a constructor in Java? If yes, how?
Yes, a class can exist without a constructor in Java. If no constructor is explicitly defined
in a class, Java provides a default no-argument constructor. However, if any constructor is
explicitly defined (with or without parameters), Java does not provide the default constructor.
So, if you define at least one constructor, you need to define all the constructors needed for
your class explicitly.

7. Explain the concept of static keyword in Java with respect to classes and methods.
The static keyword in Java can be applied to both variables and methods. When applied to a
variable, it means that the variable is shared among all instances of the class and can be
accessed using the class name. When applied to a method, it means that the method belongs to
the class rather than any specific instance, and can be called using the class name without
the need to create an instance of the class.

8. What is the purpose of the final keyword in Java when applied to variables, methods, and
classes?
1. When applied to variables, the final keyword makes the variable a constant and its value
cannot be changed once initialized.
2. When applied to methods, the final keyword prevents the method from being overridden in
subclasses.
3. When applied to classes, the final keyword prevents the class from being subclassed.

9. Explain the concept of garbage collection in Java and how it relates to objects.
Java has automatic garbage collection. When an object is no longer referenced by any variables
and is not reachable in your program, the garbage collector identifies it and removes it from
memory to free up space.

10. Describe how you can implement a deep copy of an object in Java.
Java doesn't have a built-in deep copy mechanism. To create a new object with all its
attributes and nested objects copied independently, you can implement a custom method that
iterates through the object's attributes and creates copies for them. Libraries like Apache
Commons Lang can also be helpful for deep copying.

11. Explain the difference between static and non-static (instance) methods and variables
in Java with regards to objects.
Static methods: These methods belong to the class itself and don't require creating an object
to access them. They can only access static members of the class.
Non-static (instance) methods: These methods operate on instances (objects) of the class. They
have access to both static and non-static members of the class.
Static variables:  These variables belong to the class itself and are shared across all instances
of the class. There is only one copy of the static variable in memory.
Non-static (instance) variables: These variables belong to each object instance and have unique
values for each object.
