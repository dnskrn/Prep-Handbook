Questions
=========
1. What is a Constructor in Java?
A constructor in Java is a special type of method that is used to initialize objects. It
has the same name as the class and does not have a return type, not even void. Constructors
are called automatically when a new instance of a class is created. There are two types of
constructors in Java: default (no-argument) constructors and parameterized constructors.

2. How does a Constructor differ from a method?
Constructors differ from methods in several ways:
1. Constructors must have the same name as the class name, whereas methods can have any name.
2. Constructors do not have a return type, not even void, while methods must have a return type.
3. Constructors are called automatically when a new instance of the class is created, while
methods need to be explicitly called.

3. Can a Constructor be made final, static, or abstract in Java?
No, constructors in Java cannot be final, static, or abstract. Making a constructor static
doesn't make sense because constructors are meant for initializing objects, and static means
class level; abstract constructors would imply that the constructor is not complete, which
conflicts with the purpose of initialization; and final would imply that the constructor
cannot be overridden, which is not applicable since constructors are not inherited.

4. What is the purpose of a default constructor?
The default constructor is a no-argument constructor automatically provided by Java if no
other constructors are explicitly defined in the class. Its purpose is to perform default
initialization of the object, such as initializing member variables with default values.

5. Can we overload constructors in Java?
Yes, Java allows constructor overloading, which means a class can have more than one constructor
with different parameter lists. This allows objects of the class to be initialized in different ways.

6. Explain the difference between constructor overloading and method overloading.
Both constructor and method overloading in Java involve defining multiple constructors or methods
with the same name but different parameter lists. The key difference is that constructor overloading
allows creating objects in different ways, while method overloading provides different ways to
perform a task or operation on the objects.

7. What is a copy constructor in Java? Provide an example.
A copy constructor in Java is a constructor that initializes an object using another object of the
same class. This is useful for copying the values of all fields of an object to another object.

class Student {
    String name;
    int age;

    // Default constructor
    public Student() {
    }

    // Copy constructor
    public Student(Student s) {
        this.name = s.name;
        this.age = s.age;
    }

    // Parameterized constructor
    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

8. Is it possible to call a constructor from another constructor?
Yes, in Java, constructors can call another constructor in the same class using this() reference.
This is often used for constructor chaining, to reuse the constructor's code. This call should be
the first statement in the constructor body.

9. What happens if a superclass does not have a default constructor and the subclass has an
explicit constructor?
If a superclass does not have a default (no-argument) constructor, the subclass must explicitly
call one of the superclasses parameterized constructors in its own constructor. This is achieved
by using the super() call with the appropriate arguments to match one of the superclasses
constructor signatures. If this call is not made, a compile-time error will occur.

10. Give an example of a scenario where a constructor throws an exception.
Constructors in Java can throw exceptions just like methods. This is particularly useful when
an object cannot be initialized properly under certain conditions.

class MyResource implements AutoCloseable {
    public MyResource() throws Exception {
        // Initialization code that might throw an exception
        throw new Exception("Failed to initialize");
    }

    @Override
    public void close() throws Exception {
        // Cleanup resources
    }

    public static void main(String[] args) {
        try (MyResource res = new MyResource()) {
            // Use the resource
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}

11. Do we have a copy constructor in Java?
Java doesn't have a built-in copy constructor like C++. You can achieve copying object state by:
Assigning values from one object to another in the constructor of the new object.
Using the clone() method of the Object class (be cautious of its limitations).

12. How can you call a superclass constructor from a subclass constructor?
Use the super() keyword within the subclass constructor to call the superclass constructor.
This is essential for proper initialization in inheritance hierarchies.

13. When would you use a private constructor?
You can use a private constructor to restrict object creation outside the class. This is often
used in the Singleton design pattern to ensure there's only one instance of a class.

14. Explain the concept of default constructor resolution?
Default constructor resolution refers to how Java compiler handles constructor invocation when no
explicit constructors are defined in a class. If no constructors are provided in the class, the
compiler automatically inserts a default constructor with no arguments. However, if you define any
constructor (parameterized or default), the default constructor won't be automatically generated.

15. Can you use this() and super() together in a constructor?
No, using this() and super() together in a constructor is not allowed. Both this() and super()
are constructor invocation statements, and only one can be used as the first statement in a
constructor. Trying to use them together will result in a compilation error.

16. What is constructor ambiguity, and how can it be resolved?
Constructor ambiguity occurs when multiple constructors are defined in a class with the same
parameter list. This situation can confuse the compiler when trying to determine which
constructor to invoke. Constructor ambiguity can be resolved by providing distinct parameter
lists for each constructor or by changing the order of parameters to make them distinct.

17. Can you override a constructor in Java?
No, constructors cannot be overridden in Java because constructors are not inherited like methods.
However, subclass constructors can call superclass constructors using super() for constructor chaining.

18. Explain the difference between constructor and static block initialization.
Constructors are used to initialize instance variables and are called when an object of the class
is created. Static initialization blocks, on the other hand, are used to initialize static variables
and are executed only once when the class is loaded into memory, even before any object of the class
is created.

19. Can you call a non-static method from a constructor?
Yes, you can call a non-static method from a constructor. However, it is recommended to be
cautious when doing so, especially if the method is overridden in subclasses, as the subclass
method may not be fully initialized when called from the superclass constructor.

public class ConstructorNonStaticMethodDemo {

    public static void main(String[] args) {
        new Derived();
    }

    public static class Base {

        public Base() {
            initialize();
        }

        public void initialize() {
            System.out.println("Initialize from Base");
        }
    }

    public static class Derived extends Base {

        String message = "Initialize from Derived";

        public Derived(){

        }

        @Override
        public void initialize() {
            System.out.println(message);
        }

    }
}


Certainly! The concern when calling non-static, especially overridable, methods from a constructor is about
the object's state. If a subclass overrides these methods, the overridden version gets called even before the
subclass constructor has run. This might lead to unexpected behavior if the subclass method relies on
subclass-specific fields or initialization. Here's an example to demonstrate this issue:

class Base {
    public Base() {
        initialize();
    }

    // Non-static method that could be overridden by subclasses
    void initialize() {
        System.out.println("Base initialize");
    }
}

class Derived extends Base {
    private String message = "Hello from Derived";

    // Overriding the initialize method
    @Override
    void initialize() {
        // Accessing subclass-specific field
        System.out.println(message);
    }

    public Derived() {
        // Explicit call to the Base constructor is implicit here
    }
}

public class TestConstructor {
    public static void main(String[] args) {
        new Derived();
    }
}
In this example:
================
Base is a superclass with a constructor that calls a non-static initialize() method.

Derived is a subclass that overrides the initialize() method and accesses a subclass-
specific field message.

When new Derived() is executed:

The Derived constructor implicitly calls the Base constructor because Derived doesn't
explicitly call super().

The Base constructor calls initialize(), intending to call its own method. However,
due to polymorphism, the overridden method in Derived is called instead.

The initialize() method in Derived attempts to use the message field. However, the
Derived constructor has not run yet, so the field initialization private String
message = "Hello from Derived"; has not occurred if the field relied on more complex
initialization that couldn't be completed at the declaration point.

Role of Constructors in Creating Immutable Objects:
====================================================
Constructors play a fundamental role in creating immutable objects because they allow us to
initialize the object's state upon creation. In immutable classes, once an object is created,
its state cannot be changed. Therefore, it's essential to set all the object's fields during
construction itself. Let's illustrate this with an example:

public final class ImmutablePerson {
    private final String name;
    private final int age;

    public ImmutablePerson(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}

In the ImmutablePerson class above, both name and age are final and initialized in the constructor.
Once an instance of ImmutablePerson is created, its state cannot be modified, making it immutable.

Constructor vs. Static Factory Method for Object Creation:
==========================================================
Both constructors and static factory methods can be used for object creation, but they serve different
purposes and offer distinct advantages.

Static Factory Method:
======================
Static factory methods are static methods within a class that return an instance of the class. They
provide more flexibility in object creation compared to constructors. Static factory methods can have
meaningful names, can return a cached instance, or even return a subclass instance. Here's an example:

public class MyClass {
    private int value;

    private MyClass(int value) {
        this.value = value;
    }

    // Static factory method for object creation
    public static MyClass createInstance(int value) {
        return new MyClass(value);
    }

    // Other methods...
}

// Creating an object using a static factory method
MyClass obj = MyClass.createInstance(10);

When to use each approach:
==========================
Use Constructor:
================
For basic object creation and initialization.
When the class represents a fundamental entity with a clear initialization process.

Use Static Factory Method:
==========================
For providing more descriptive names for object creation.
When you want to return cached instances or control object creation logic.
When you want to return instances of subclasses or different implementations based on parameters.