Questions
=========
1. What is polymorphism in Java?
Polymorphism is the ability of an object to take on multiple forms. In Java, it allows objects
of different classes to be treated as objects of a common superclass through inheritance, method
overriding, and method overloading.

2. What are the two types of polymorphism in Java?
Compile-time polymorphism (or static polymorphism) and runtime polymorphism (or dynamic polymorphism).

3. Explain compile-time polymorphism with an example.
Compile-time polymorphism is achieved through method overloading. In this case, the compiler
determines which method to call based on the number and type of arguments passed to the method.

4. Explain runtime polymorphism with an example.
Runtime polymorphism is achieved through method overriding. In this case, the method to be
executed is determined at runtime based on the object being referred to.

5. What is dynamic method dispatch?
Dynamic method dispatch is a mechanism in Java where the method to be executed is determined at
runtime based on the actual type of the object being referred to by a reference variable of the
superclass type. It allows a subclass to provide a specific implementation of a method that is
already defined in its superclass.

6. What is static method dispatch?
Method dispatch in the context of static methods, it's important to note that method dispatch
for static methods is determined at compile-time rather than runtime. This is because static
methods belong to the class itself rather than to instances of the class, and they are resolved
based on the compile-time type of the reference variable.

6. How can you achieve polymorphism using interfaces?
Interfaces define abstract methods that concrete classes must implement. This allows objects
of different classes that implement the same interface to be treated polymorphically.

7. How would you handle situations where a method needs to access the specific type of
an object at runtime in a polymorphic context?
You can use the instanceof operator to check the object's type and then cast it to the specific
type if necessary. However, excessive casting should be avoided.

8. What is static binding and late binding in java?
Static Binding (Early Binding):
===============================
1. Static binding refers to the process where the compiler determines which method implementation
to call based on the reference type (or static type) of the object during compile-time.
2. It occurs when the method invocation is resolved at compile-time based on the reference type
of the object.
3. private, final and static members (methods and variables) use static binding.

Late Binding (Dynamic Binding):
===============================
1. Late binding refers to the process where the JVM determines which method implementation to call
based on the actual type of the object during runtime.
2. It occurs when the method invocation is resolved at runtime based on the actual object type.
3. Virtual methods (In Java methods are virtual by default) binding is done during run time based
upon the run time object.

package preparation.revise;

class Animal {
    public void makeSound() {
        System.out.println("Generic animal sound");
    }

    public static void eat() {
        System.out.println("Generic animal eat");
    }
}

class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Woof!");
    }

    public static void eat() {
        System.out.println("Dog eat");
    }

}

public class Demo {
    public static void main(String[] args) {
        Animal animal1 = new Animal();
        Animal animal2 = new Dog();

        // Dynamic Binding
        animal1.makeSound(); // Output: Generic animal sound
        animal2.makeSound(); // Output: Woof! (dynamic binding)

        // Static Binding
        animal1.eat(); // Generic animal eat
        animal2.eat(); // Generic animal eat
    }
}
