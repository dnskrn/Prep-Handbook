Questions
=========
1. What is Cohesion? What do you understand by the term "cohesion" in the context of software
engineering?
Cohesion refers to the degree to which the elements of a module belong together. It measures
the strength of the relationship between the methods and data of a class or the components of
a module. High cohesion within a module or class means that its responsibilities are closely
related, making it more understandable, reusable, and maintainable. There are different levels
of cohesion, from low (coincidental cohesion) to high (functional cohesion).

2. What is Coupling? Can you explain "coupling" and its impact on software design?
Coupling describes how tightly connected or dependent modules are to each other. It measures
the degree of interdependence between modules. High coupling means that a module is highly
dependent on other modules, which makes it harder to understand, modify, or replace that module
without affecting others. Low coupling (or loose coupling) is desirable as it promotes module
independence, enhancing the system's flexibility and maintainability.

3. What is the difference between cohesion and coupling?
Cohesion and coupling both deal with the relationships within and between modules, but they
focus on different aspects. Cohesion refers to the internal relatedness of the elements within
a single module or class, aiming for a single, well-defined responsibility. High cohesion means
the module/class does a specific thing well. Coupling, on the other hand, refers to the
interdependencies between different modules or classes. The goal is to have low coupling to reduce
the impact of changes and improve modularity. In summary, cohesion focuses on the internal workings
of a module/class, while coupling focuses on the relationships between modules/classes.

4. How Can You Achieve High Cohesion and Low Coupling in Java?
High Cohesion: Achieve high cohesion by designing classes and modules with narrowly focused
responsibilities. This can be done by:
1. Ensuring each class has a single responsibility (Single Responsibility Principle).
2. Grouping related functions and data together in classes.
3. Using private methods for functionality that is not meant to be exposed outside of the class.
Low Coupling: Achieve low coupling through design patterns and principles that promote independence,
such as:
1. Interface-based programming: Define interfaces for interactions between classes, which reduces
the dependency on concrete implementations.
2. Dependency Injection: Pass dependencies from outside rather than creating them inside the class,
which allows for more flexibility and easier testing.
3. Using design patterns like the Observer pattern for event-driven communication or the Factory
pattern to decouple object creation.

5. Why are High Cohesion and Low Coupling Important?
High cohesion and low coupling are important because they directly contribute to the maintainability,
understandability, flexibility, and testability of the code. High cohesion ensures that classes and
modules are designed with a single focus or responsibility, making them easier to understand, debug,
and test. Low coupling reduces dependencies between modules, making the system more modular and
flexible, which simplifies changes and the introduction of new features. Together, they help in
building systems that are robust, scalable, and easier to maintain.

6. What are the different levels of cohesion in Java?
There are several levels of cohesion, ranging from high (most desirable) to low:
Highly Cohesive: Elements within the class work together to achieve a single,
well-defined task.
Moderately Cohesive: Elements are somewhat related but may perform multiple subtasks
related to the main responsibility.
Low Cohesion: Elements have little to no relation and perform unrelated functionalities
within the same class. This is generally an indicator of bad design practices.

7. What are the different types of coupling in Java, and how can we achieve loose coupling?
There are various types of coupling, with data coupling being the most preferred (low coupling):
1. Data Coupling: Modules communicate through simple data items like primitives or objects with
relevant information.
2. Stamp Coupling: Modules share complex data structures, making changes in one potentially
affect the other.
3. Control Coupling: One module dictates the flow of execution in another through control
flags or data values.
4. Common Coupling: Modules rely on global data, leading to tight dependency. We can achieve
loose coupling by using interfaces, dependency injection, and avoiding inheritance for
reuse if composition can suffice.

There are different levels of cohesion:
=======================================
Functional Cohesion: This is the strongest type of cohesion, where all elements within a module
contribute to a single well-defined task or functionality. For example, a function that calculates
the square root of a number has functional cohesion.

Sequential Cohesion: In this type, elements within a module are related and executed sequentially,
but they don't necessarily contribute to a single task. An example is a function that reads data
from a file, processes it, and then writes the result to another file.

Temporal Cohesion: Here, elements in a module are related because they are all executed at the same
time. This type of cohesion is often seen in initialization routines.

Communicational Cohesion: Elements in a module are related because they operate on the same input data
or produce the same output data. An example is a module that calculates various statistics from a dataset.

Procedural Cohesion: In this type, elements within a module are grouped together because they are used
by the same algorithm, even if they perform different tasks. This is considered weaker than functional
cohesion.

Coincidental Cohesion: This is the lowest level of cohesion, where elements within a module are unrelated
and do not contribute to a single task. This often indicates poor design and should be avoided.

There are different levels of coupling:
=======================================
No Coupling (Independent): Modules are completely independent of each other.

Data Coupling: Modules share data through parameters or return values, but they are otherwise independent.

Stamp Coupling: Modules share complex data structures, such as arrays or objects, but they are still
independent.

Control Coupling: One module controls the flow of another module by passing it control information, like a
flag or a switch.

External Coupling: Modules share a common external data source, such as a file or a database.

Common Coupling: Multiple modules access the same global data.

Content Coupling: Modules share internal details or implementations, which is considered the strongest form
of coupling and should be avoided.

Here are some examples illustrating problems caused by excessive coupling:
==========================================================================

Difficulties in Unit Testing:
=============================
Excessive coupling between modules can make it challenging to isolate and test individual components.
Here's an example where a tightly coupled class makes unit testing difficult:

// Tightly coupled class
public class ShoppingCart {
    private List<Item> items;

    public void addItem(Item item) {
        items.add(item); // Direct dependency on List<Item>
    }

    public void removeItem(Item item) {
        items.remove(item); // Direct dependency on List<Item>
    }

    public double calculateTotalPrice() {
        double total = 0;
        for (Item item : items) { // Dependency on List<Item>
            total += item.getPrice(); // Dependency on Item.getPrice()
        }
        return total;
    }
}

// Item class
public class Item {
    private String name;
    private double price;

    public double getPrice() {
        return price;
    }
}

In this example, the ShoppingCart class is tightly coupled to the List<Item> data structure and the
Item class. Unit testing becomes challenging because we cannot easily replace or mock the dependencies
(List<Item> and Item) to isolate the ShoppingCart class for testing.

Increased Risk of Side Effects When Making Changes:
===================================================
Excessive coupling increases the risk of unintended side effects when making changes to one module that
affects another module unexpectedly. Here's an example:

// Tightly coupled classes
public class EmailService {
    public void sendEmail(String recipient, String message) {
        // Send email implementation
    }
}

public class UserService {
    private EmailService emailService;

    public UserService() {
        this.emailService = new EmailService(); // Direct instantiation of EmailService
    }

    public void registerUser(String username, String email) {
        // User registration logic
        emailService.sendEmail(email, "Welcome to our platform!"); // Direct dependency on EmailService
    }
}

In this example, the UserService class is tightly coupled to the EmailService class. If we need to change
the email sending logic or switch to a different email service provider, we must modify the UserService
class, leading to potential side effects and breaking changes.

Decreased Code Readability:
===========================
Excessive coupling can result in code that is difficult to understand and maintain due to tangled dependencies.
Here's an example:

// Tightly coupled classes
public class DatabaseConnection {
    public Connection getConnection() {
        // Database connection logic
    }
}

public class ReportGenerator {
    private DatabaseConnection dbConnection;

    public ReportGenerator() {
        this.dbConnection = new DatabaseConnection(); // Direct instantiation of DatabaseConnection
    }

    public void generateReport() {
        Connection conn = dbConnection.getConnection(); // Direct dependency on DatabaseConnection
        // Report generation logic
    }
}

In this example, the ReportGenerator class is tightly coupled to the DatabaseConnection class. Anyone reading
the ReportGenerator class may struggle to understand its functionality without understanding its dependencies
on the database connection.