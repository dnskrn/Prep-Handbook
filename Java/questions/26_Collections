Questions
=========
1. What are collections in Java?
Collections in Java are frameworks that provide an architecture to store and manipulate a
group of objects. They are used to store, retrieve, manipulate, and communicate aggregate
data.
x`
2. What is the difference between Collection and Collections in Java?
Collection is an interface that represents a single group of objects, whereas Collections
is a utility class in Java that contains static methods for operating on collections.

3. What are the main interfaces in the Java Collection framework?
The main interfaces are:
1. List: Ordered collection of elements that allows duplicate elements.
2. Set: Collection that does not allow duplicate elements.
3. Map: Key-value pair collection.
4. Queue: Collection used to hold multiple elements before processing.

4. How does HashMap work in Java?
HashMap uses a hash table to store key-value pairs. It uses the hash code of the keys to store
and retrieve elements quickly. In case of hash collisions, it uses a linked list or balanced
tree to store multiple elements with the same hash code.

5. What is the difference between HashMap and HashTable?
In summary, HashMap is preferred in most scenarios due to its better performance and flexibility.
Hashtable is mainly used in legacy code or situations where thread-safety is a strict requirement.
However, in modern Java development, alternatives like ConcurrentHashMap are often preferred over
Hashtable for thread-safe use cases due to better performance.
Synchronization:
================
1. HashMap is not synchronized, meaning it is not thread-safe. Multiple threads can access HashMap
concurrently, but if any thread modifies it structurally (addition or deletion of mappings), it
must be synchronized externally.
2. Hashtable is synchronized, meaning it is thread-safe. All methods in Hashtable are synchronized,
so it can be safely accessed by multiple threads without additional synchronization.

Null keys and values:
=====================
1. HashMap allows one null key and any number of null values. Retrieval of Null Key value is
possible.
2. Hashtable allows one null key and any number of null values. Retrieval of Null Key value
is not possible and throws NullPointerException.

Performance:
============
1. HashMap generally performs better than Hashtable in single-threaded scenarios due to its lack of
synchronization overhead.
2. In multi-threaded scenarios, Hashtable might perform better in some cases because it is synchronized.

Iterator fail-fast vs. enumerator fail-safe:
============================================
1. HashMap uses iterator for traversing the elements. The iterator in HashMap is fail-fast, meaning it
throws a ConcurrentModificationException if the map is modified structurally while iterating.
2. Hashtable uses enumerator for traversing the elements. The enumerator in Hashtable is fail-safe,
meaning it doesn't throw any exception if the map is modified structurally while enumerating.

Performance trade-off:
======================
Due to its synchronization, Hashtable may incur performance overhead compared to HashMap, especially in
scenarios where synchronization is not necessary.

6. What is the purpose of the Comparable and Comparator interfaces?
Comparable interface is used to define the natural ordering of elements within a class, while
Comparator interface is used to define custom ordering of elements outside the class.

Comparator and Comparable interfaces are used for custom sorting of objects. Comparable is
implemented by a class to define its natural ordering, while Comparator is used for defining
custom ordering externally. Use Comparable when you want to define a natural ordering for a
class. Use Comparator when you want to define multiple ordering options or when you don't have
access to the class's source code.

7. How can you synchronize a List in Java?
You can synchronize a List in Java using the Collections.synchronizedList() method.
For example:
List<String> synchronizedList = Collections.synchronizedList(new ArrayList<>());

8. How do you iterate over elements in a List in Java?
You can iterate over elements in a List using various methods such as for-each loop, Iterator,
ListIterator, or Stream API.

9. What is the difference between fail-fast and fail-safe iterators?
Fail-fast iterators throw ConcurrentModificationException if the collection is modified while
iterating, whereas fail-safe iterators allow modification of the collection while iterating and
do not throw any exception.

10. What are the benefits of using the Collections Framework?
There are many benefits to using the Collections Framework, including:
1. Consistency: It provides a consistent way to work with various collections of objects.
2. Reusability:** Many common operations like sorting and searching are already implemented
and can be reused across different collection types.
3. Extensibility: The framework is designed to be extensible, allowing you to create your
custom collection implementations.

11. What is the difference between ArrayList and LinkedList?
ArrayList uses a dynamic array for storing elements and provides fast random access but slower
insertion and deletion, while LinkedList uses a doubly-linked list for storage and provides
faster insertion and deletion but slower random access.

12. Difference between HashSet and TreeSet:
Both HashSet and TreeSet implement the Set interface, but they differ in how they store and
order elements:
1. HashSet: Uses a hash table for storing elements. Doesn't guarantee any specific order for
elements and allows null values (only one).
2. TreeSet: Uses a tree-based structure to store elements. Maintains a sorted order for the
elements and doesn't allow null values.

13. What is the difference between HashSet and LinkedHashSet?
HashSet does not maintain any order of elements, while LinkedHashSet maintains the insertion
order of elements.
Set<String> hashSet = new HashSet<>();
Set<String> linkedHashSet = new LinkedHashSet<>();
HashSet
1. Uses Hashtable for storage.
2. Doesn't guarantee order of elements.
3. Relatively performance is high when compared with LinkedHashset.
4. Has a lower memory usage as it doesn't require extra DS for ordering of elements.
LinkedHashSet
1. Uses Hashtable for storage.
2. Preserve the insertion order of elements.
3. Relatively performance is low due to the overhead of maintaining LinkedList DS for order
preservation.
4. Uses more memory as it requires it stores elements in both hashtable and LinkedList.

14. Explain the difference between List and Set.
List allows duplicate elements and maintains the insertion order of elements, while Set does
not allow duplicate elements and does not maintain any order.

15. What is the purpose of the Collections.unmodifiableList() method?
The Collections.unmodifiableList() method returns an unmodifiable view of the specified list.
It prevents modification of the original list.
Example:
List<String> originalList = new ArrayList<>();
originalList.add("Apple");
originalList.add("Banana");
List<String> unmodifiableList = Collections.unmodifiableList(originalList);

16. Explain the purpose of the java.util.Queue interface.
The Queue interface represents a collection designed for holding elements prior to processing.
It follows the FIFO (First-In-First-Out) principle for element retrieval.
Example:
Queue<String> queue = new LinkedList<>();
queue.add("One");
queue.add("Two");
String element = queue.poll(); // Retrieves and removes the head of the queue

17. What is the purpose of the java.util.Deque interface?
The Deque interface represents a double-ended queue, which allows insertion and removal of
elements from both ends. It extends the Queue interface.
Example:
Deque<String> deque = new ArrayDeque<>();
deque.addFirst("First");
deque.addLast("Last");

18. What is an Iterator and how is it used?
An iterator in Java is an object that enables you to traverse through a collection (like a list,
set, or map) and access each element sequentially, one at a time, without needing to know the
internal representation of the collection. Iterators provide a uniform way to access elements
regardless of the underlying data structure of the collection.

19. How can you compare two sets for equality, considering the order of elements might differ?
Equality for sets doesn't consider order. Here are two approaches:
1. Use HashSet.containsAll(): Check if all elements from one set are present in the other using
containsAll().
2. Use Set.equals() with a custom comparator: Define a comparator that ignores element order and
compare sets using equals() with this comparator.

20. Explain how collections can be synchronized for thread safety.
The Collections Framework provides methods like Collections.synchronizedList() or
Collections.synchronizedMap() that wrap existing collections and provide synchronized access to
their methods. Alternatively, you can use thread-safe collection implementations like
ConcurrentHashMap or CopyOnWriteArrayList.

21. What is the difference between HashSet, LinkedHashSet, and TreeSet? When would you use each
of them?
HashSet stores elements using a hash table, providing constant-time performance for basic
operations but does not guarantee any specific order. LinkedHashSet maintains the insertion
order of elements in addition to the unique elements property. TreeSet is a sorted set that
orders elements based on their natural ordering or a provided comparator. Use HashSet when
order doesn't matter and you need fast access. Use LinkedHashSet when you need to maintain
the insertion order. Use TreeSet when you need elements sorted.

22. How does ConcurrentHashMap achieve thread-safety compared to Hashtable and synchronizedMap?
ConcurrentHashMap achieves thread-safety by dividing the underlying data structure into segments,
allowing multiple threads to access different segments concurrently. This minimizes contention
compared to Hashtable and synchronizedMap, which lock the entire data structure during modification,
leading to potential performance bottlenecks in highly concurrent scenarios.

23. Explain the differences between HashMap and TreeMap. When would you choose one over the other?
HashMap uses a hash table for storing key-value pairs, providing constant-time performance for
basic operations but does not guarantee any specific order. TreeMap is a sorted map that orders
elements based on their natural ordering or a provided comparator. Use HashMap when order doesn't
matter and you need fast access. Use TreeMap when you need elements sorted.

24. Can you explain the internal implementation of the HashSet class in Java? How does it ensure
uniqueness of elements?
HashSet internally uses a HashMap to store elements. It ensures uniqueness by checking if the hash
code of an element already exists in the set. If the hash code already exists, it further checks for
equality using the equals() method to determine if the element is already present. If not, it adds
the element to the set.

25. Discuss the differences between Iterator, ListIterator, and Enumeration in Java. When would you
use each?
Iterator is used for iterating over collections in a forward direction, while ListIterator is used
for iterating over lists bidirectionally and modifying the list during iteration. Enumeration is an
older interface primarily used for legacy collections, and its use is discouraged in modern Java.
Use Iterator for iterating collections. Use ListIterator for lists when you need bidirectional
traversal and modification.


