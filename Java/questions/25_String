Questions
=========
1. What is a string in Java?
A string in Java is an object representing a sequence of characters. It is a data type
that is used to represent text.

2. How can you create a string object in Java?
There are several ways to create a string object in Java:
1. Using string literals: String str = "Hello";
2. Using the new keyword: String str = new String("Hello");

3. What is the difference between == and .equals() method in Java when comparing strings?
The == operator compares object references, checking if they point to the same memory location.
The .equals() method compares the actual contents of the strings to determine if they are equal.

4. How can you concatenate strings in Java?
Strings can be concatenated in Java using the + operator or by using the concat() method.
For example:
String str1 = "Hello";
String str2 = "World";
String result = str1 + " " + str2; // Using +
String result = str1.concat(" ").concat(str2); // Using concat()

5. What is the StringBuilder class in Java? How is it different from String class?
StringBuilder is a mutable sequence of characters. It is similar to StringBuffer but not
synchronized. Unlike String, StringBuilder objects can be modified.

6. How do you convert a string to uppercase or lowercase in Java?
You can convert a string to uppercase using the toUpperCase() method and to lowercase using
the toLowerCase() method.
For example:
String str = "Hello";
String upperCaseStr = str.toUpperCase(); // "HELLO"
String lowerCaseStr = str.toLowerCase(); // "hello"

7. How can you check if a string contains a substring in Java?
You can use the contains() method or indexOf() method to check if a string contains a substring.
For example:
String str = "Hello World";
boolean containsHello = str.contains("Hello"); // true
int index = str.indexOf("World"); // index = 6

8. What is the split() method in Java?
The split() method is used to split a string into an array of substrings based on a delimiter.
For example:
String str = "apple,banana,orange";
String[] fruits = str.split(","); // ["apple", "banana", "orange"]

9. Is String thread-safe?
In Java, the String class is immutable, meaning once a String object is created, its state cannot
be changed. This immutability makes String objects inherently thread-safe because multiple threads
can access and use String objects simultaneously without the risk of modification.

10. What is the difference between String, StringBuffer and StringBuilder in Java?
String:
=======
Immutable: Once a String object is created, its state cannot be changed.
Thread-safe: Due to immutability, String objects are inherently thread-safe.
Concatenation: Concatenating strings using + operator creates a new String object.
Performance: Concatenating many strings using + can be inefficient because it creates multiple
intermediate string objects.
Use cases: Suitable for situations where the content of the string won't change frequently, such
as storing constants or representing fixed text.

StringBuffer:
=============
Mutable: StringBuffer objects can be modified after creation.
Thread-safe: StringBuffer methods are synchronized, making them safe for use in multithreaded
environments.
Concatenation: Efficient for concatenating multiple strings because it modifies the existing
buffer instead of creating new objects.
Performance: Slower than StringBuilder because of synchronization.
Use cases: Suitable for situations where thread safety is required or when performing frequent
modifications to strings in a multithreaded environment.

StringBuilder:
==============
Mutable: StringBuilder objects can be modified after creation.
Not thread-safe: Unlike StringBuffer, StringBuilder methods are not synchronized, making them
faster but not suitable for concurrent use in multithreaded environments without external
synchronization.
Concatenation: Efficient for concatenating multiple strings due to mutable nature and lack of
synchronization overhead.
Performance: Faster than StringBuffer because it's not synchronized.
Use cases: Suitable for situations where thread safety is not a concern or when performance is
critical, such as in single-threaded or low-concurrency scenarios.

11. What is the difference between creating String object using literal and new keyword?
Using String Literals:
======================
String str = "Hello";
When you use a string literal like "Hello", Java checks the string pool first to see if an
identical string already exists in the pool. If an identical string is found, the existing
string object is reused, and no new object is created. If an identical string does not exist
in the pool, a new string object is created in the string pool, and its reference is returned.

Using the new Keyword:
======================
String str = new String("Hello");
When you use the new keyword, Java always creates a new string object in the heap memory,
regardless of whether the same string already exists in the string pool. Even if the string
"Hello" is already present in the string pool, using new String("Hello") will create a new
object in the heap memory, not in the string pool. This approach is useful when you explicitly
need a new object in the heap, separate from any existing objects in the string pool.

In summary, using string literals benefits from string interning, where identical strings are
reused from the string pool, potentially saving memory and improving performance. On the other
hand, using the new keyword always creates a new object in the heap, regardless of whether an
identical string already exists in the string pool.

12. What is String Constant Pool?
The string constant pool is a special area in the Java heap memory where string literals
(i.e., strings defined using double quotes) are stored. Strings in the pool are shared among
all the references in the program, which allows for string interning, where identical string
literals are reused rather than creating new instances.

13. How do you find the length of a String?
Use the length() method. (e.g., int stringLength = name.length(); )

14. How do you access individual characters in a String?
Use the charAt(index) method, where index is the position of the character (zero-based).

15. How do you compare two Strings for equality?
1. Use the equals() method for content comparison. (e.g., if (name1.equals(name2)) { ... } )
2. Use the == operator for referential equality (checks if they point to the same object).
(Not recommended for String comparison).

16. How do you extract a portion of a String (substring)?
Use the substring(startIndex, endIndex) method. (e.g., String lastName = name.substring(5); )

17. How can you improve the efficiency of String concatenation when modifying a String
frequently?
Use StringBuilder or StringBuffer classes which are mutable and more efficient for frequent
modifications.

18. What is the output of the following code snippet?
String str1 = "hello";
String str2 = "hello";
System.out.println(str1 == str2);
The output will be true. Explanation: Java optimizes memory usage by maintaining a string
pool for string literals. Since both str1 and str2 are initialized with the same string
literal "hello", they refer to the same object in the string pool.

19. What is the output of the following code snippet?
String str1 = "hello";
String str2 = new String("hello");
System.out.println(str1 == str2);
The output will be false. Explanation: Even though the content of str1 and str2 is the same,
str2 is created using the new keyword, which forces the creation of a new string object in the
heap memory, not in the string pool.

20. What is the purpose of the intern() method in the String class?
The intern() method returns a canonical representation of the string, which means it returns a
string from the string pool if a string equal to this string is already in the pool; otherwise,
this string object is added to the pool and returned.

21. How can you reverse a string in Java?
There are multiple ways to reverse a string in Java, such as using a loop, StringBuilder or
StringBuffer, or using the reverse() method of StringBuilder.
For example:
String original = "hello";
String reversed = new StringBuilder(original).reverse().toString();
System.out.println(reversed); // Output: olleh

22. Explain how String immutability can be beneficial.
Answer: String immutability ensures thread safety. Since a String's content cannot be changed,
multiple threads accessing the same String object won't corrupt the data. Additionally, it allows
for better memory management as the JVM can reuse String objects in the String pool if identical
content is encountered.

23. Describe a scenario where you might prefer using StringBuilder over String concatenation
with + operator.
When you are frequently modifying a String, using the + operator creates a new String object for
each concatenation. This can be inefficient. StringBuilder is a mutable class specifically designed
for efficient String manipulation.

24. Explain the concept of String interning in Java. How does it impact memory management and
performance?
String interning is the process of storing only one copy of each distinct string value, which
must be immutable. In Java, string literals are automatically interned by the JVM, meaning that
they are stored in a special memory area called the "string pool." When a new string literal is
encountered, the JVM checks if an identical string already exists in the pool. If it does, the
existing string is reused; otherwise, a new string is created and added to the pool. String
interning helps in conserving memory by reducing duplication of string objects and can improve
performance by enabling reference equality checks (==) rather than content-based checks (.equals()).