Questions
=========
1. What is a static block in Java?
A static block is a block of code enclosed within the static keyword inside a class. It's executed
only once when the class is loaded into memory by the Java Virtual Machine (JVM).

2. What is the purpose of a static block?
Static blocks are used to initialize static variables or to perform one-time initialization tasks
for a class.

3. Can we have multiple static blocks in a Java class?
Yes, a Java class can have multiple static blocks. They are executed in the order they appear in
the class, from top to bottom.

4. When is a static block executed?
A static block is executed when the class is loaded into memory by the JVM. This typically happens
when the class is first referenced in the code or when an instance of the class is created.

5. Can we directly call a static block from the main method?
No, static blocks are automatically executed when the class is loaded, and they cannot be directly
invoked from other methods, including the main method.

6. Can we have a return statement in a static block?
No, a static block cannot have a return statement because it doesn't return any value. It's primarily
used for initialization tasks.

7. What happens if an exception occurs inside a static block?
If an exception occurs inside a static block, the class will not be loaded successfully, and an
error will be thrown. This can prevent the application from running properly.

8. Can we have instance variables inside a static block?
No, instance variables cannot be declared inside a static block because static blocks are executed
before any instances of the class are created.

9. Can we access non-static members (instance variables or methods) inside a static block?
No, non-static members cannot be accessed directly inside a static block. You need to create an
instance of the class to access non-static members.

10. How is a Static Block executed compared to a constructor?
Static blocks are guaranteed to be executed before any constructor of the class, even if the static
block is declared after the constructor in the code. This is because static blocks are part of class
initialization, while constructors are invoked when an object is created.

11. What are some use cases for Static Blocks?
1. Initializing static variables: You can use static blocks to initialize static variables with values
that are needed throughout the class.
2. Loading resources: Static blocks can be used to load resources like configuration files or database
connections that are shared by all instances of the class.
3. Initializing constants: Static blocks are a good place to define and initialize final constants used
throughout the class.

12. What's the difference between a Static Block and a static method?
Both static blocks and static methods can be used without creating an object of the class. However,
there are key differences:
Execution: Static blocks execute only once during class loading, while static methods can be called
multiple times throughout the program.
Purpose: Static blocks are primarily used for initialization, while static methods define reusable
functionality.

13. Consider a class Base with a static block and a subclass Derived that also has a static block.
In what order will the static blocks be executed if you create an object of Derived?
The static blocks are executed in the order of class hierarchy. First, the static block of Base will
be executed, followed by the static block of Derived. This happens because the class loader loads the
parent class first, then the child class.

14. What happens if a static block throws an exception?
If a static block throws an exception, the class loading process fails, and any attempt to use the
class will result in a ClassNotFoundException. This highlights the importance of ensuring static
blocks contain reliable code.

15. Can you call a static method of a class from within a static block, even though no object has
been created yet?  How about accessing static variables?
Yes, you can call static methods and access static variables within a static block. Since both
static methods and static blocks belong to the class itself, they can access each other before
any object is created.

16. Is it guaranteed that a final static variable will be initialized by its assigned value
before the static block runs?
No, final static variables are not guaranteed to be initialized before the static block runs.
The static block execution order depends on class loading, which might happen in a different
order than variable initialization. It's safer to initialize final static variables within the
static block itself.

17. What happens if two static blocks have circular dependencies (referencing each other's
functionality)?
Circular dependencies between static blocks can lead to a StackOverflowError as the JVM keeps
trying to execute them in an endless loop.  It's essential to avoid circular dependencies in
static block logic.

18. Is it possible to catch an exception thrown in a static block?
Yes, it is possible to catch an exception thrown in a static block using a try-catch block.
However, it's important to handle the exception properly to prevent class loading failure.
public class Example {
    static {
        try {
            // Code that may throw an exception
        } catch (Exception e) {
            // Handle the exception
        }
    }
}

19. What happens if we have both a static block and a static initializer in the same class?
If a class contains both a static block and a static initializer, the static block will be executed
before the static initializer.
public class Example {
    static {
        System.out.println("Static block executed first");
    }

    static int x = 10;

    static {
        System.out.println("Static initializer executed next");
    }
}