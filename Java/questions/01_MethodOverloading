Questions
=========
1. What is Method Overloading?
Method Overloading is a feature in Java that allows a class to have multiple methods with
the same name but different parameters.

2. How is Method Overloading different from Method Overriding?
Method Overloading involves multiple methods with the same name in the same class with
different parameters. Method Overriding occurs in a subclass that provides a specific
implementation for a method already defined in its superclass.

3. What are the criteria for method overloading?
Method overloading is based on the number, type, and order of parameters. Return types and
access modifiers are not considered during method overloading.

4. Can we overload methods by changing the return type?
No, method overloading is not based on the return type. Overloaded methods must have a
different number or type of parameters.

5. Give an example of method overloading in Java.
Provide a code example demonstrating two or more methods in the same class with the same
name but different parameters.

6. Explain the concept of Varargs in method overloading.
Varargs (variable-length argument lists) allow a method to accept a variable number of
arguments. You can overload a method by including a varargs parameter.

7. How does the compiler determine which method to call during method overloading?
The compiler determines the method to call based on the number, types, and order of the
parameters passed during the method invocation.

8. Can methods be overloaded in the same class if they have the same parameters but
different return types?
No, methods with the same parameters and different return types cannot be overloaded. It
will result in a compilation error.

9. Explain the role of autoboxing and widening in method overloading?
Autoboxing and widening are mechanisms that allow the compiler to match different types of
arguments with the corresponding method parameters during method overloading. Autoboxing
converts primitive types to their corresponding wrapper classes, and widening involves
converting smaller data types to larger ones.

10. Can you overload methods based on the order of parameters?
No, the order of parameters alone cannot be used for overloading. Overloaded methods must
have a different number or type of parameters.

11. What happens if you have two overloaded methods that differ only in the number of
parameters, but one of them has a varargs parameter?
The method without varargs will be called in cases where the number of arguments matches.
Varargs is considered less specific, and the compiler prefers methods without varargs when
both options are available.

12. Consider two overloaded methods, one with a parameter of type int and the other with
a parameter of type long. If you call the method with an int argument, which method will
be invoked?
The method with the int parameter will be invoked. Java promotes the int argument to a long
to match the method signature with the most specific parameter type.

13. How does autoboxing and unboxing affect method overloading?
Autoboxing and unboxing can make method overloading tricky. For example, if you have methods
with parameters of primitive types and their corresponding wrapper types, ambiguity may arise
during method invocation.

14. Explain the behavior if you have two overloaded methods, one with a parameter of type
Object and the other with a parameter of type String, and you pass a null argument?
The method with the parameter type String will be called. Java chooses the most specific method
during method invocation, and a String is more specific than Object.

15. Can you overload methods in the same class with different access modifiers?
Yes, you can overload methods with different access modifiers. Access modifiers are not
considered during method overloading.

16. Consider two overloaded methods, one with a parameter of type int[] and the other with
varargs of type int. If you call the method with multiple int arguments, which method will
be invoked?
The method with varargs will be called. Varargs is considered less specific, and the compiler
prefers it when both options are available.

17. Explain the behavior if you have two overloaded methods, one with a parameter of type double
and the other with a parameter of type float, and you pass a float argument?
The method with the parameter type float will be called. Java promotes the float argument to a
double to match the method signature with the most specific parameter type.

18. Can you overload methods by changing only the return type and using generics?
No, changing only the return type, even with generics, doesn't create a unique method signature
for overloading. It will result in a compilation error.

19. Scenario: Overloaded Methods with Inheritance
Suppose you have a base class with an overloaded method, and a subclass that overrides one of
those methods. Explain the rules and considerations when it comes to method overloading and
overriding in this scenario.

public class BaseClass {

    // Overloaded method in the base class
    public void display(String message) {
        System.out.println("BaseClass: " + message);
    }

    // Overloaded method in the base class
    public void display(int number) {
        System.out.println("BaseClass: " + number);
    }
}

public class SubClass extends BaseClass {

    // Overriding one of the overloaded methods in the subclass
    @Override
    public void display(String message) {
        System.out.println("SubClass: " + message);
    }
}

public class MethodOverloadingInheritanceExample {

    public static void main(String[] args) {
        BaseClass baseObject = new BaseClass();
        SubClass subObject = new SubClass();

        // Call the overloaded methods from the base class
        baseObject.display("Hello");   // Calls display(String message)
        baseObject.display(42);        // Calls display(int number)

        System.out.println("-------------");

        // Call the overridden method from the subclass
        subObject.display("World");    // Calls display(String message)
    }
}

20. Real-world Scenario: API Design
Imagine you are designing a library or API that involves method overloading. How would you structure
the overloaded methods to ensure clarity, usability, and avoid potential pitfalls for developers
using your library?

public class MathUtility {

    // Addition for integers
    public static int add(int a, int b) {
        return a + b;
    }

    // Addition for doubles
    public static double add(double a, double b) {
        return a + b;
    }

    // Addition for integers with a third integer
    public static int add(int a, int b, int c) {
        return a + b + c;
    }

    // Addition for doubles with a third double
    public static double add(double a, double b, double c) {
        return a + b + c;
    }

    // Calculate average for an array of integers
    public static double calculateAverage(int[] numbers) {
        if (numbers.length == 0) {
            throw new IllegalArgumentException("Array must not be empty");
        }

        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }

        return (double) sum / numbers.length;
    }

    // Calculate average for an array of doubles
    public static double calculateAverage(double[] numbers) {
        if (numbers.length == 0) {
            throw new IllegalArgumentException("Array must not be empty");
        }

        double sum = 0;
        for (double num : numbers) {
            sum += num;
        }

        return sum / numbers.length;
    }

    // More utility methods...
}

21. Scenario: Overloaded Constructors and Methods
Suppose you have a class with overloaded constructors and overloaded methods. Describe a scenario
where both constructor and method overloading are used together and explain how the compiler
resolves method calls?

public class Shape {
    private double area;

    // Overloaded constructors for different shapes
    public Shape() {
        System.out.println("Creating a generic shape.");
    }

    public Shape(double radius) {
        calculateCircleArea(radius);
    }

    public Shape(double length, double width) {
        calculateRectangleArea(length, width);
    }

    // Overloaded methods to calculate areas
    private void calculateCircleArea(double radius) {
        area = Math.PI * Math.pow(radius, 2);
        System.out.println("Area of the circle: " + area);
    }

    private void calculateRectangleArea(double length, double width) {
        area = length * width;
        System.out.println("Area of the rectangle: " + area);
    }

    // Display area
    public void displayArea() {
        System.out.println("Current area: " + area);
    }

    public static void main(String[] args) {
        // Example 1: Creating a generic shape
        Shape genericShape = new Shape();
        genericShape.displayArea();

        System.out.println("-------------");

        // Example 2: Creating a circle and calculating its area
        Shape circle = new Shape(5.0);
        circle.displayArea();

        System.out.println("-------------");

        // Example 3: Creating a rectangle and calculating its area
        Shape rectangle = new Shape(3.0, 4.0);
        rectangle.displayArea();
    }
}

22. Complex Scenario: Generics and Method Overloading
Create a scenario involving generic methods and overloaded methods. Discuss the challenges and
considerations when dealing with generic types in the context of method overloading?

package preparation.revise.mol;

import java.util.Arrays;

public class Demo11 {

    public static void main(String[] args){
        String[] array1 = {"Hello", ", ", "World"};
        System.out.println(concatenate(array1));
        Character[] array2 = {'J', 'A', 'V', 'A'};
        System.out.println(concatenate(array2));
        printArray(array2);
        Integer[] array3 = {1, 2, 3, 4, 5};
        System.out.println(calculateSum(array3));
    }

    public static <T> void printArray(T[] array){
        System.out.println(Arrays.toString(array));
    }

    public static <T extends Number> double calculateSum(T[] array){
        double sum = 0.0;
        for(T element : array){
            sum += element.doubleValue();
        }
        return sum;
    }

    public static String concatenate(String[] array){
        StringBuilder result = new StringBuilder();
        for(String str : array){
            result.append(str);
        }
        return result.toString();
    }

    public static <T> String concatenate(T[] array){
        StringBuilder result = new StringBuilder();
        for(T str : array){
            result.append(str.toString());
        }
        return result.toString();
    }

}

23. Scenario: Overloaded Methods with Autoboxing and Widening
Consider a class with overloaded methods, one that takes a primitive int and another that
takes an Integer. Explain how autoboxing and widening play a role in method resolution when
calling these methods?

public class NumberProcessor {

    // Method that takes a primitive int
    public static void processNumber(int value) {
        System.out.println("Processing primitive int: " + value);
    }

    // Overloaded method that takes an Integer
    public static void processNumber(Integer value) {
        System.out.println("Processing Integer: " + value);
    }

    public static void main(String[] args) {
        // Example 1: Calling the method with a primitive int
        int primitiveValue = 42;
        processNumber(primitiveValue);

        // Example 2: Calling the method with an Integer
        Integer integerValue = 55;
        processNumber(integerValue);

        // Example 3: Calling the method with autoboxing and widening
        byte byteValue = 10;
        processNumber(byteValue);  // byte is widened to int and then autoboxed to Integer
    }
}

24. Complex Scenario: Overloading with Multiple Inheritance
Suppose you have a class that implements multiple interfaces, each with overloaded methods.
Discuss the challenges and resolutions when it comes to method overloading in a multiple
inheritance scenario?

interface Shape {
    void draw();
    void draw(String color);
}

interface Drawable {
    void draw(int width, int height);
    void draw(String color);
}

class ShapeDrawer implements Shape, Drawable {

    @Override
    public void draw() {
        System.out.println("Drawing a generic shape.");
    }

    @Override
    public void draw(String color) {
        System.out.println("Drawing a shape with color: " + color);
    }

    @Override
    public void draw(int width, int height) {
        System.out.println("Drawing a shape with width: " + width + " and height: " + height);
    }
}

public class MultipleInheritanceExample {

    public static void main(String[] args) {
        ShapeDrawer shapeDrawer = new ShapeDrawer();

        // Example 1: Drawing a generic shape
        shapeDrawer.draw();

        // Example 2: Drawing a shape with color
        shapeDrawer.draw("Blue");

        // Example 3: Drawing a shape with width and height
        shapeDrawer.draw(10, 15);
    }
}

Challenges:
===========
Name Collision:
The draw method in both interfaces has the same name, but they have different parameter lists.
This can lead to a collision when a class implements both interfaces.

Resolution Ambiguity:
If a class implements multiple interfaces, each with overloaded methods, the compiler may face
ambiguity when resolving which method to call based on the provided arguments.

Provide explicit implementations for each method in the implementing class. This resolves the
ambiguity, and the compiler can easily identify which method to call.

class ShapeDrawer implements Shape, Drawable {

    @Override
    public void draw() {
        System.out.println("Drawing a generic shape.");
    }

    @Override
    public void draw(String color) {
        System.out.println("Drawing a shape with color: " + color);
    }

    @Override
    public void draw(int width, int height) {
        System.out.println("Drawing a shape with width: " + width + " and height: " + height);
    }

    // Explicit implementation for the conflicting method
    @Override
    public void draw(String color, int width, int height) {
        System.out.println("Drawing a shape with color: " + color +
                ", width: " + width + ", and height: " + height);
    }
}

Method Renaming:
================
Rename the conflicting methods in the interfaces to avoid collisions. This ensures that each
method in the implementing class has a unique signature.

interface Shape {
    void draw();
    void drawWithColor(String color); // Renamed to avoid conflict
}

interface Drawable {
    void draw(int width, int height);
    void drawWithColor(String color); // Renamed to avoid conflict
}

class ShapeDrawer implements Shape, Drawable {

    @Override
    public void draw() {
        System.out.println("Drawing a generic shape.");
    }

    @Override
    public void drawWithColor(String color) {
        System.out.println("Drawing a shape with color: " + color);
    }

    @Override
    public void draw(int width, int height) {
        System.out.println("Drawing a shape with width: " + width + " and height: " + height);
    }
}

25. Scenario: Overloaded Methods with Primitive and Wrapper Types
Create a scenario where a class has overloaded methods—one that takes a primitive type and
another that takes the corresponding wrapper type. Discuss how method resolution works when
calling these methods with both primitive and wrapper type arguments?

public class NumberUtil {

  public void processNumber(int number) {
    System.out.println("Processing int: " + number);
  }

  public void processNumber(Integer number) {
    System.out.println("Processing Integer: " + number);
  }
}

NumberUtil util = new NumberUtil();
int value = 10;

// Exact Match - processNumber(int) is called
util.processNumber(value);  // Output: Processing int: 10

Integer wrappedValue = 20;

// Exact Match - processNumber(Integer) is called
util.processNumber(wrappedValue);  // Output: Processing Integer: 20

This class has two processNumber methods:

One takes an int (primitive integer) as an argument.
The other takes an Integer (wrapper class for integer) as an argument.

Method Resolution
=================
When calling these methods, Java uses a specific process to determine which method to invoke:

Exact Match: The compiler first searches for a method with the exact parameter type as the actual
argument being passed.

Autoboxing: If no exact match is found for a primitive type argument, Java performs autoboxing.
This automatically converts the primitive value to its corresponding wrapper class object.

Widening Conversion: If autoboxing doesn't lead to a match, the compiler checks for widening
conversion. Widening allows converting a smaller primitive type to a larger one (e.g., int to
double). However, this won't work in this case with int and Integer.

26. Real-world Scenario: Database Interaction
Imagine designing a database interaction class with methods for inserting data. How would you
use method overloading to handle different data types, such as strings, integers, and dates,
while maintaining a clean and intuitive API?

public class DatabaseUtil {

  public void insertData(String tableName, String columnName, String value) {
    System.out.println("Inserting String: " + value + " into " + tableName + "." + columnName);
  }

  public void insertData(String tableName, String columnName, int value) {
    System.out.println("Inserting Integer: " + value + " into " + tableName + "." + columnName);
  }

  public void insertData(String tableName, String columnName, Date value) {
    System.out.println("Inserting Date: "  + value + " into " + tableName + "." + columnName);
  }

  // You can add more methods for other data types...
}

DatabaseUtil util = new DatabaseUtil();

util.insertData("users", "name", "John Doe");
util.insertData("orders", "created_at", new Date());
util.insertData("products", "price", 19.99);

Explanation:
============
This DatabaseUtil class has overloaded insertData methods.
Each method takes three arguments:
tableName: Name of the table to insert data into (String).
columnName: Name of the column to insert data into (String).
value: The actual data value to insert (varies by data type).

Benefits:
=========
Clean API: Developers can use the same method name (insertData) for various data types, making
the code more readable.
Type Safety: Each method enforces specific data types, reducing the risk of errors.
Extensibility: You can add more overloaded methods for additional data types like booleans or
doubles as needed.


