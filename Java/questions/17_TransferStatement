Questions
=========
1. What is the purpose of the break statement in Java?
The break statement is used to terminate the loop or switch statement it is inside.
It is particularly useful when you want to exit a loop prematurely based on certain conditions.

2. How does a labeled break statement work in Java?
A labeled break statement is used to terminate a specific loop or switch statement identified
by the label. When encountered, it exits the labeled loop or switch, transferring control to
the statement immediately following the loop or switch.

3. What are jump statements in Java, and how do they affect program flow?
Jump statements (break, continue, return) alter the normal execution sequence of code.
1. break exits a loop or switch statement.
2. continue skips the remaining code in a loop's current iteration and moves to the next.
3. return exits a method, optionally returning a value.

4. Explain the use of the break statement with examples.
The break statement terminates the execution of the innermost enclosing loop or switch statement.
Example (exiting a loop when a condition is met):
for (int i = 0; i < 10; i++) {
    if (i == 5) {
        break;
    }
    System.out.println(i);
}

5. When would you use the continue statement? Provide an illustration.
The continue statement skips the remaining code in the current iteration of a loop and proceeds
to the next.
Example (printing only odd numbers):
for (int i = 0; i < 10; i++) {
    if (i % 2 == 0) {
        continue;
    }
    System.out.println(i);
}

6. Describe the purpose of the return statement. How does it influence method execution?
The return statement exits the current method, optionally returning a value.
If a value is returned, it becomes the result of the method call.
Example (calculating factorial):
public static int factorial(int n) {
    if (n == 0) {
        return 1;
    }
    return n * factorial(n - 1);
}

7. What are some potential drawbacks of using jump statements excessively?
1. Excessive use of jump statements can make code harder to read and maintain.
2. The logic flow might become less clear, making debugging more challenging.
3. Consider alternative approaches like restructuring loops or extracting conditional logic
into separate methods for better readability.

8. What is the purpose of the continue statement in Java?
The continue statement is used to skip the rest of the code within a loop for the current
iteration and proceed to the next iteration of the loop.

9. Can you use a continue statement outside of a loop in Java?
No, the continue statement is specifically designed to be used within loop constructs (for,
while, do-while). It cannot be used outside of a loop.

10. Explain the return statement in Java.
The return statement is used to exit a method and optionally return a value to the caller
of the method. When a return statement is encountered, the method immediately stops executing
and control is returned to the calling code.

11. What happens if a return statement is encountered within a loop in Java?
If a return statement is encountered within a loop in Java, it immediately exits the loop as
well as the method containing the loop. Any code following the return statement within the loop
or method will not be executed.

12. Can you have multiple return statements in a single method in Java?
Yes, a method in Java can have multiple return statements. However, only one return statement
will be executed during the method invocation. The choice of which return statement to execute
depends on the flow of control within the method.

13. How do you handle the scenario where you need to return a value conditionally in Java?
In such scenarios, you can use conditional statements (if, else if, else) to determine which value
to return based on certain conditions. Multiple return statements can be used within these
conditional blocks to return different values depending on the conditions.

14. What is the difference between return and System.exit() in Java?
return is used to exit from a method and optionally return a value to the caller. It does not
terminate the entire program execution.
System.exit() is used to terminate the entire Java Virtual Machine (JVM) and hence the program.
It accepts an integer argument indicating the exit status of the program.