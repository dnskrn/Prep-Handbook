Questions
=========
1. What is an inner class in Java?
An inner class in Java is a class that is defined within another class. It can have access to
the members (fields and methods) of the outer class, including private members.

2. How many types of inner classes are there in Java? Can you name them?
There are four types of inner classes in Java:
1. Static nested class
2. Non-static nested class (or inner class)
3. Local inner class
4. Anonymous inner class

3. Explain the difference between static and non-static inner classes.
1. Static nested class: It is a static member of the outer class and can be accessed directly
using the outer class name. It cannot access non-static members of the outer class directly.
2. Non-static inner class: Also known as an inner class, it belongs to an instance of the outer
class and has access to both static and non-static members of the outer class.

4. What is the purpose of using an inner class?
Inner classes are used to logically group classes that are only used in one place, increase
encapsulation, and can lead to more readable and maintainable code by logically grouping
classes.

5. Can an inner class access private members of its outer class? Why or why not?
Yes, an inner class can access private members of its outer class because inner classes have
access to all members of the outer class, regardless of their access modifiers.

6. How do you instantiate an inner class from the outer class?
To instantiate an inner class from the outer class, you need to create an instance of the outer
class first, and then use that instance to create an instance of the inner class.
Outer outerObj = new Outer();
Outer.Inner innerObj = outerObj.new Inner();

7. Can an inner class access local variables of the method it is defined in?
Yes, an inner class can access local variables of the method it is defined in, but the local
variables must be declared as final or effectively final.

8. Explain the concept of anonymous inner classes in Java.
Anonymous inner classes are inner classes without a name. They are defined and instantiated
at the same time, usually as arguments to methods or constructors. They are useful for
implementing interfaces or extending classes on-the-fly.

9. How are nested classes different from inner classes?
Nested classes include all types of classes defined within other classes, including inner
classes. Inner classes specifically refer to non-static nested classes.

10. What is the scope of an inner class in Java?
The scope of an inner class is limited to the scope of the outer class. However, an inner
class instance can be passed outside the scope of the outer class.

11. Can inner classes have their own methods and variables?
Yes, inner classes can have their own methods and variables just like any other class.

12. How do you access an inner class from outside its outer class?
To access an inner class from outside its outer class, you need to use the outer class
instance to create an instance of the inner class, as shown in question 6.

13. Can an inner class be declared within a method?
Yes, inner classes can be declared within a method. These are called local inner classes.

14. What is a nested interface in Java, and how is it related to inner classes?
A nested interface in Java is an interface that is declared within another class or interface.
It can be declared as static or non-static. Non-static nested interfaces are related to inner
classes because they must be accessed through an instance of the outer class.

15. Explain the use of inner classes in event handling in Java Swing applications.
Inner classes are commonly used in Java Swing applications for event handling. For example,
an ActionListener can be implemented using an anonymous inner class to handle button clicks
or other events efficiently within the same class scope.

16. Is it possible to declare an interface inside an inner class?
Yes, it is possible to declare an interface inside an inner class. This is known as a
nested interface.

17. Can an inner class implement multiple interfaces?
Yes, an inner class can implement multiple interfaces, similar to any other class in Java.

18. Can a local inner class access local variables of the enclosing method if they are not
declared final?
No, a local inner class cannot access non-final local variables of the enclosing method after
the method exits. This is because the local variable might be garbage collected after the
method finishes.

19. Can you extend a class and implement an interface simultaneously in an anonymous inner class?
No, In Java, an inner class (including anonymous inner classes) cannot extend a class and implement
an interface simultaneously. An inner class can either extend a class or implement an interface, but
not both at the same time.

20. Can an inner class be declared as private or protected?
Yes, an inner class can be declared as private, protected, or public, just like any other class
in Java.

21. Can an anonymous inner class access static members of its outer class directly?
No, anonymous inner classes cannot directly access static members of their outer class without
an instance of the outer class. While they have access to non-static members through the this
reference, static members belong to the class itself, not the instance.
Solution: You can access static members using the outer class name like OuterClass.staticMemberName.

22. How can you differentiate between accessing a member with the same name in both the inner and
outer class?
Java uses shadowing to resolve this. When accessing a member with the same name from within the
inner class, you need to use the outer class name as a prefix (e.g., OuterClass.memberName).
This clarifies which member you're referring to.

23. How can you create a thread-safe inner class?
There are two main approaches:
1. Make the inner class static: Static nested classes are inherently thread-safe because there's
only one instance shared across all threads.
2. Synchronize access to shared resources: If a member inner class needs to access shared resources
of the outer class, synchronize methods within the inner class to ensure thread safety.

24. How does serialization of inner classes work in Java? What considerations should be taken into
account?
When serializing an inner class in Java, the outer class instance is also serialized along with the
inner class instance. This is because inner classes have an implicit reference to the outer class
instance. Considerations include ensuring that the outer class is serializable and properly handling
serialization of non-serializable outer classes.

25. Explain the concept of shadowing in inner classes. How can you access the shadowed members?
Shadowing in inner classes occurs when an inner class declares a member with the same name as a
member in its enclosing class. To access the shadowed members, you can use the this keyword to
refer to the current instance of the inner class and OuterClassName.this to refer to the instance
of the outer class.