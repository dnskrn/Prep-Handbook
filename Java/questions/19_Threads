Questions
=========
1. What is a thread in Java?
A thread in Java is a lightweight process, a separate path of execution within a program.
It allows concurrent execution of tasks, enabling the program to perform multiple operations
simultaneously.

2. How can you create a thread in Java?
There are two ways to create a thread in Java:
1. By extending the Thread class and overriding its run() method.
2. By implementing the Runnable interface and passing an instance of the implementing class
to a Thread constructor.

3. What is the Runnable interface?
The Runnable interface in Java represents a task that can be executed by a thread. It has a
single abstract method run() that needs to be implemented by any class that wants to define
a task to be executed by a thread.

4. What is the difference between Thread class and Runnable interface for creating threads?
When you extend the Thread class, your class cannot extend any other class because Java does
not support multiple inheritance. But, by implementing the Runnable interface, you can extend
another class and still create a thread.

Using the Runnable interface promotes better object-oriented design because the class implementing
Runnable is more likely to be a cohesive unit.

5. What is the start() method in Java threads?
The start() method is used to begin the execution of a thread. When start() is called, the JVM
calls the run() method of the thread internally. It's important to note that calling the run()
method directly won't start a new thread; it will just execute the run() method on the current
thread.

6. What is the join() method in Java threads?
The join() method allows one thread to wait for the completion of another thread. When a thread
calls join() on another thread, it waits until the other thread completes its execution before
proceeding.

7. What is thread synchronization?
Thread synchronization is the process of controlling the access to shared resources by multiple
threads to prevent data inconsistency or corruption. In Java, synchronization can be achieved
using the synchronized keyword, locks, or other concurrency utilities provided by the java.util
.concurrent package.

8. What is deadlock in Java? How can it be avoided?
Deadlock is a situation in which two or more threads are blocked forever, waiting for each other
to release resources. Deadlock can be avoided by following some best practices such as:
1. Avoiding nested locks.
2. Ensuring that locks are acquired and released in the same order by all threads.
3. Using timeouts when acquiring locks.
4. Using higher-level concurrency utilities like java.util.concurrent instead of low-level
synchronization primitives.

9. What are the different states of a thread?
A thread can be in one of the following states: New, Runnable, Blocked, Waiting, Timed Waiting,
and Terminated.

10. What is the difference between a process and a thread?
A process is a self-contained program execution environment, whereas a thread is a unit of
execution within a process. Processes are heavyweight and resource-intensive, while threads
are lightweight and share the resources of the process.

11. What is the difference between start() and run() methods?
The start() method starts the thread and creates a new thread of execution for the thread's
code. The run() method contains the actual code that the thread will execute.

12. What are daemon threads?
A daemon thread is a thread that runs in the background, providing services to other threads.
They are typically used for tasks such as garbage collection and monitoring, and they
automatically terminate when all non-daemon threads have finished executing.

13. What is synchronization?
Synchronization is the process of coordinating access to shared resources by multiple
threads to prevent race conditions and data corruption.

14. What are different ways to achieve synchronization in Java?
Java provides various synchronization mechanisms like synchronized methods and blocks,
locks (reentrant locks), and atomic operations to achieve thread safety.

15. What is a thread pool?
A thread pool is a collection of pre-initialized threads that are ready to perform tasks.
Instead of creating new threads for each task, thread pools re-use existing threads, which
reduces the overhead of thread creation and destruction. Thread pools can manage the number
of active threads, prevent resource exhaustion, and provide better control over the execution
of tasks. They are commonly used in server applications and other scenarios where managing
concurrency is crucial.

16. What are the benefits of using multithreading?
Multithreading in Java offers several advantages.
=================================================
1. First, it allows multiple tasks to run concurrently within a single program, improving
performance and resource usage, especially on computers with multiple cores.
2. Second, it enhances responsiveness by keeping applications interactive even during
long-running tasks.
3. Third, threads can share resources like memory and file handles, enabling efficient
communication between different parts of the program.
4. Fourth, multithreading promotes modular design, breaking down complex tasks into smaller,
manageable units.
5. Fifth, it enables parallel execution of tasks, reducing overall execution time, especially
for intensive or I/O-bound operations.
6. Sixth, applications can scale better with hardware improvements, leveraging available
processing power more effectively.
7. Lastly, multithreading facilitates asynchronous programming, handling events and asynchronous
I/O operations efficiently. Overall, multithreading makes Java programs more efficient,
responsive, and capable of handling concurrent tasks effectively.

17. Explain the difference between wait(), notify(), and notifyAll() methods.
1. wait(): Causes the current thread to wait until another thread invokes the notify() or
notifyAll() method for the same object.
2. notify(): Wakes up a single thread that is waiting on the object's monitor. If multiple
threads are waiting, it is arbitrary which one is awakened.
3. notifyAll(): Wakes up all threads that are waiting on the object's monitor. They will
compete for the lock once notified.
It's important to note that these methods should be used within synchronized blocks to avoid
illegal monitor state exceptions.

18. Explain the concept of thread starvation and how it can be mitigated in Java?
Thread starvation occurs when a thread is unable to gain access to resources or CPU time because
other threads are consistently given priority. This can lead to unfair scheduling and degradation
of performance.
Thread starvation can be mitigated by implementing fair scheduling policies, such as using the
ReentrantLock class with fairness enabled, which ensures that the longest-waiting thread gets
access to the lock first. Additionally, using thread pools with bounded queues and properly
managing thread priorities can help prevent thread starvation.

19. Explain the concept of thread-local variables and when they might be useful.
Thread-local variables are variables that are local to each thread, meaning that each thread has
its own independent copy of the variable. They are useful when you need to store thread-specific
data, such as user sessions in a web application or transaction context in a database connection
pool. Thread-local variables ensure that each thread operates on its own distinct data without
interference from other threads.

20. What are the potential pitfalls of using multithreading in Java, and how can they be mitigated?
Some potential pitfalls of multithreading in Java include deadlock, race conditions, and
excessive thread creation. These can be mitigated by following best practices such as proper
synchronization, avoiding nested locks, using thread-safe data structures, and minimizing the
creation and destruction of threads. Additionally, thorough testing and code review can help
identify and resolve threading issues early in the development process.

21. What is the purpose of the volatile keyword in Java?
The volatile keyword is used to indicate that a variable's value may be modified by multiple
threads that are executing concurrently. It ensures that changes made by one thread to the
variable are visible to other threads immediately.

22. DeadLock vs LiveLock
In summary, deadlock occurs when threads are blocked indefinitely waiting for each other to
release resources, while livelock occurs when threads are actively trying to resolve a conflict
but are stuck in a repetitive cycle without making progress. Both scenarios can result in a
loss of application functionality and require careful design and implementation to prevent.

Deadlock:
=========
Deadlock occurs when two or more threads are blocked indefinitely, each waiting for the other
to release a resource that they need. In other words, each thread holds a resource while waiting
to acquire another resource held by another thread, resulting in a deadlock situation where none
of the threads can proceed.
Deadlocks typically arise due to a lack of proper synchronization or incorrect resource allocation
strategies in the code.
Deadlocks can be difficult to detect and debug because the program may appear to be functioning
normally, but it becomes unresponsive or deadlocked when certain conditions are met.

Livelock:
=========
Livelock is a situation where two or more threads actively try to resolve a conflict, but they
do so in such a way that none of the threads make progress. Unlike deadlock, where threads are
blocked, in livelock, threads are not blocked but are stuck in a repetitive cycle of trying to
resolve the conflict.
Livelock can occur when threads are programmed to respond to each other's actions in a way that
causes them to continually change their state without making progress towards a resolution.
Livelock can also be challenging to detect and resolve because the threads involved are not
technically blocked, but they are unable to make forward progress.

23. Explain the difference between intrinsic locking (synchronized blocks/methods) and explicit
locking (Lock interface) in Java. When would you use one over the other?
1. Intrinsic locking, provided by the synchronized keyword, is built into the Java language and
is used to ensure that only one thread can execute a synchronized block or method on an object
at a time. It provides a simple and intuitive way to achieve thread synchronization but has
limitations such as lack of flexibility and potential for deadlocks.
2. Explicit locking, using the Lock interface from the java.util.concurrent.locks package, offers
more control and flexibility over synchronization. It allows finer-grained locking, supports
features like try-lock, lock timeouts, and conditions, and can help avoid problems like deadlock.
You might choose explicit locking when you need more advanced synchronization features or finer
control over locking compared to intrinsic locking.

24. What are the benefits and drawbacks of using thread pools in Java?
Benefits of using thread pools:
===============================
1. Improved performance: Thread pools can reduce the overhead associated with creating and destroying
threads by reusing existing threads for multiple tasks.
2. Better resource management: Thread pools limit the number of concurrent threads, preventing the
system from becoming overwhelmed and improving resource utilization.
3. Simplified concurrency management: Thread pools abstract away the complexity of managing individual
threads, making it easier to develop concurrent applications.

Drawbacks of using thread pools:
================================
1. Potential for resource contention: If tasks in the pool are long-running or blocked, it can lead
to resource contention and reduced throughput.
2. Overhead of managing threads: Maintaining a pool of threads requires additional overhead in terms
of memory and CPU usage, which may impact performance.
3. Difficulty in tuning: Determining the optimal size of the thread pool and configuring parameters
such as the queue size and rejection policy can be challenging and require tuning based on the
specific workload.

25. What is the difference between thread-local variables and shared variables in Java?
When would you use each?
Thread-local variables are variables that are local to each thread and are not shared between
threads. Each thread has its own copy of the variable, which is not visible to other threads.
Thread-local variables are typically used when you need to maintain per-thread state or context,
such as in the case of thread-local storage (TLS) or maintaining user sessions in web applications.

Shared variables, on the other hand, are variables that are accessible to multiple threads and
can be shared between them. Access to shared variables must be synchronized to ensure thread
safety and prevent data races. Shared variables are used when multiple threads need to access
or modify a common state or resource.

26. ThreadLocal vs. InheritableThreadLocal: Compare and contrast ThreadLocal and
InheritableThreadLocal. When would you use each?
Both ThreadLocal and InheritableThreadLocal provide thread-specific storage. ThreadLocal isolates
data for each thread, while InheritableThreadLocal allows child threads to inherit data from the
parent thread. Use ThreadLocal for thread-specific configurations or data that shouldn't be shared.
Use InheritableThreadLocal when data needs to be passed down to child threads, like security contexts
or resource managers.