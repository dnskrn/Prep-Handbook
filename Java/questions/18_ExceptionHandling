Questions
=========
1. What is an exception in Java?
An exception in Java is an event that disrupts the normal flow of the program's instructions
during execution. It can occur due to various reasons such as invalid input, network failure,
insufficient memory, etc.

2. What are the types of exceptions in Java?
Exceptions in Java are broadly categorized into two types: Checked exceptions and Unchecked
exceptions.
Checked exceptions: These are the exceptions that are checked at compile time. Examples include
IOException, SQLException, etc.
Unchecked exceptions: Also known as runtime exceptions, these exceptions are not checked at
compile time. Examples include NullPointerException, ArrayIndexOutOfBoundsException, etc.

3. What is the purpose of the try-catch block?
The try-catch block is used to handle exceptions in Java. The code that may throw an exception
is enclosed within the try block, and the catch block is used to handle the exception if it occurs.
If an exception occurs within the try block, control is transferred to the catch block.

4. Can we have multiple catch blocks following a single try block?
Yes, we can have multiple catch blocks following a single try block. This allows us to handle
different types of exceptions separately.

5. What is the purpose of the finally block?
The finally block is used to execute important code such as closing resources (like files or
database connections) whether an exception is thrown or not. It ensures that certain code is
always executed, regardless of whether an exception occurs or not.

6. Explain the difference between checked and unchecked exceptions.
Checked exceptions are checked at compile time, and the compiler ensures that they are caught
or declared to be thrown. Unchecked exceptions, on the other hand, are not checked at compile
time and can occur at runtime.

7. What is the difference between throw and throws in Java?
1. throw is used to explicitly throw an exception within a method.
2. throws is used in the method signature to indicate that the method may throw certain types
of exceptions, and it specifies the exceptions that the method may throw.
3. throw is followed by an instance of Throwable (e.g., new Exception()), whereas throws is
followed by the list of exceptions that a method may throw.

8. How can you create custom exceptions in Java?
Custom exceptions can be created by extending the Exception class (for checked exceptions) or
the RuntimeException class (for unchecked exceptions) or any of their subclasses. Custom exceptions
are typically used to represent application-specific error conditions.

9. How do you handle exceptions in a multi-threaded environment?
In a multi-threaded environment, exceptions can be handled by surrounding the code that may throw
an exception with a try-catch block within the thread's run() method. Additionally, you can set
an uncaught exception handler using Thread.setDefaultUncaughtExceptionHandler() to handle uncaught
exceptions that occur in a thread.

10. What are the keywords used in Exception Handling?
There are three main keywords: try, catch, and finally. The try block contains the code that might
throw an exception. The catch block handles the specific exception type that might occur. The
finally block executes regardless of whether an exception is thrown or not.

11. Explain the Java Exception Hierarchy:
Java exceptions follow a hierarchical structure. Throwable is the base class for all exceptions and
errors. It has two subclasses: Exception (for checked exceptions) and Error (for serious errors).
Most commonly used exceptions like IOException and NullPointerException are subclasses of Exception.

12. When should you use Exception Handling?
Use exception handling to manage unexpected errors and prevent your program from crashing. Don't
overuse it for normal program flow control.

13. How can you improve your Exception Handling code?
Use specific catch blocks to handle different exception types.
Avoid empty catch blocks - log the exception or re-throw it if you can't handle it.
Consider using try-with-resources for automatic resource management.

14. Can a method have both throws and throw keywords in its declaration?
Yes, a method can have both throws and throw in its declaration.
throws is used in the method signature to declare the exceptions that the method may throw,
while throw is used within the method body to explicitly throw an exception.

15. What happens if a method throws an exception, but it is not caught anywhere in the code?
If a method throws an exception but it is not caught anywhere in the code, the program terminates
abruptly, and the exception is propagated up the call stack until it is caught by an appropriate
catch block or until the program terminates.

16. Explain the difference between finally block and finalize() method in Java.
1. finally block is used in exception handling to execute important code (e.g., resource
cleanup) whether an exception is thrown or not, and it is associated with try-catch blocks.
2. finalize() method is a method of the Object class that is called by the garbage collector
before an object is garbage collected. It is used for cleanup operations on the object
before it is destroyed.

17. Can you catch an exception thrown in a finally block?
Yes, you can catch an exception thrown in a finally block. However, if an exception is
thrown in the finally block and it is not caught within the same block, it will override
any exception thrown in the corresponding try or catch block.

18. What is the purpose of try-with-resources statement introduced in Java 7?
The try-with-resources statement ensures that resources (e.g., files, database connections)
are closed automatically after the try block finishes execution, even if an exception occurs.
It eliminates the need for explicit resource cleanup code in a finally block.

19. Explain the concept of exception chaining in Java.
Exception chaining, also known as exception wrapping, allows one exception to be nested
within another. It is useful for preserving the original cause of an exception while
propagating it up the call stack. This can be achieved by passing the original exception
as a parameter to another exception's constructor.

20. In what scenarios might the finally block not be executed?
The finally block won't run if the JVM terminates abruptly due to errors like OutOfMemoryError
or ThreadDeath. Additionally, if a System.exit() method is called within the try or catch block,
the finally block might be bypassed.

21. What are the advantages of using try-with-resources compared to a traditional
try-catch-finally block?
The try-with-resources statement is used to automatically close resources that implement the
AutoCloseable interface (e.g., InputStream, OutputStream, Connection) after they are no longer
needed, regardless of whether an exception occurs or not. It simplifies resource management and
reduces the likelihood of resource leaks.

Unlike traditional try-catch-finally blocks where you need to explicitly close resources in the
finally block, try-with-resources automatically closes resources at the end of the block, making
the code more concise and less error-prone.

22. Discuss the role of custom exceptions in Java. When and why would you create custom exceptions?
Provide an example.
1. Custom exceptions in Java are user-defined exception classes that extend either Exception (for
checked exceptions) or RuntimeException (for unchecked exceptions).
2. They are created to represent application-specific error conditions that are not adequately covered
by built-in exceptions.
3. Custom exceptions can provide more descriptive error messages and help improve code readability and
maintainability.
An example of creating a custom exception:
public class InvalidAgeException extends RuntimeException {
    public InvalidAgeException(String message) {
        super(message);
    }
}

23. Differentiate between exception chaining and nested exceptions in Java?
Exception chaining involves throwing one exception and then linking the cause to another exception
using the initCause method. Nested exceptions, introduced in Java 7, allow embedding another exception
object within your exception class for a more structured representation of the error chain.













