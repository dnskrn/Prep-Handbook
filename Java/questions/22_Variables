Questions
=========
1. What is a variable in Java?
A variable in Java is a named memory location that stores data. It has a data type and can
hold a value that can be changed during the execution of a program.

2. How do you declare a variable in Java?
You can declare a variable in Java using the following syntax:
dataType variableName;
For example:
int age;

3. What are the different types of variables in Java?
In Java, variables can be classified into three types:
1. Local variables: Declared inside a method, constructor, or block.
2. Instance variables (non-static fields): Declared inside a class but outside any method,
constructor, or block.
3. Class variables (static fields): Declared with the static keyword inside a class but
outside any method, constructor, or block.

4. What is the difference between local variables, instance variables, and class variables?
1. Local variables: They are declared inside methods, constructors, or blocks and have local
scope. They must be initialized before use and cannot have access modifiers.
2. Instance variables: They are declared inside a class but outside any method, constructor,
or block. Each instance of the class has its own copy of instance variables.
3. Class variables: Also known as static fields, they are declared with the static keyword
inside a class but outside any method, constructor, or block. They are shared among all
instances of the class.

5. What is variable initialization?
Variable initialization is the process of assigning a value to a variable at the time of its
declaration or later in the program. In Java, variables must be initialized before they are
used.

6. What is the default value of variables in Java?
Variables in Java are assigned default values based on their data types:
1. For numeric data types (byte, short, int, long, float, double): 0
2. For boolean: false
3. For char: '\u0000' (null character)
4. For reference types (objects and arrays): null

7. Can a final variable be reassigned a new value in Java?
No, a final variable (declared with the final keyword) cannot be reassigned a new value once
it is initialized. It acts as a constant and its value remains constant throughout the program.

8. What are the naming conventions for variables in Java?
Variables in Java must follow certain naming conventions:
1. Variable names can consist of letters, digits, and underscores (_), but they cannot begin with
a digit.
2. Variable names are case-sensitive.
3. Variable names should be meaningful and follow camelCase convention (e.g., myVariableName).

9. How do you declare and initialize constants in Java?
Constants in Java are declared using the final keyword. They must be initialized at the time of
declaration or within the constructor of the class.
For example:
final int MAX_VALUE = 100;

10. What is variable scope in Java?
Variable scope refers to the region of the program where a variable is accessible. There are
three types of variable scope in Java:
1. Local scope: Variables declared inside a method, constructor, or block have local scope and
are accessible only within that method, constructor, or block.
2. Instance scope: Instance variables are accessible throughout the entire class and exist as
long as the object exists.
3. Class scope: Class variables (static fields) are accessible throughout the entire class and
exist as long as the class is loaded in memory.

11. What is the difference between primitive and reference variables?
Primitive variables hold the actual data value, while reference variables store a memory address
pointing to the location of the object in memory.

12. When do you use local variables, instance variables, and static variables?
Local variables are used for temporary data within methods. Instance variables store data
specific to each object. Static variables are used for data shared by all objects of a class,
like constants or utility values.

13. What is the difference between == and .equals() when comparing objects in Java?
1. The == operator compares object references, i.e., it checks if two references point to the
same memory location.
2. The .equals() method compares the actual contents or values of the objects. This method is
usually overridden in classes to provide custom comparison logic.

14. Explain the concept of shadowing in Java.
Shadowing occurs when a variable declared within a certain scope (such as a method or block)
has the same name as a variable declared in an outer scope. The inner variable "shadows" the
outer variable, meaning the outer variable becomes inaccessible within the inner scope.
For example:
int x = 10; // Outer variable
void method() {
    int x = 20; // Inner variable shadows the outer variable
    System.out.println(x); // Prints 20
}

15. Explain the concept of volatile variables in Java.
A volatile variable in Java is a variable that is always read directly from and written directly
to the main memory. This ensures that changes made by one thread to the variable are immediately
visible to other threads. Volatile variables are typically used in multi-threaded programming to
ensure visibility of changes across threads without the need for synchronization.

16. What is the difference between local variables, instance and class variables in terms of memory
allocation?
1. Local variables are stored on the stack and only exist within the method, constructor, or block
in which they are declared. They are not initialized with default values.
2. Instance variables are stored on the heap and are associated with objects. They are initialized
with default values when the object is created and exist as long as the object exists.
3. Class variables are stored in the method area of the heap memory. They are associated with the
class rather than with any particular instance of the class. Initialized only once, at the start
of the program execution, before any object of the class is created. Exist throughout the lifetime
of the program execution.

17. Explain the concept of variable-length argument lists (varargs) in Java.
Varargs allow methods to accept a variable number of arguments. It is denoted by three dots
(...) following the data type of the parameter. Inside the method, varargs are treated as an
array.
For example:
void printValues(int... values) {
    for (int value : values) {
        System.out.println(value);
    }
}

18. When you pass primitive variables (int, double) and object references (String) to methods
in Java, are they passed by value or by reference? How does it affect the variables?
1. Primitive variables are passed by value. A copy of the value is passed to the method. Any
changes made within the method don't affect the original variable.
2. Object references are passed by value (a copy of the memory address). The method receives
a reference to the same object. Changes made to the object's properties within the method will
be reflected in the original object.

19. Explain the order of execution when you have static initialization blocks and variable
declarations in a Java class.
1. Static initialization blocks are executed in the order they appear in the class, even
before the main method.
2. Instance variable initialization (including assignment of default values) happens at
object creation time, before any constructors are called.