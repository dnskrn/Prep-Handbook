Questions
=========
1. What are the selection statements available in Java?
Java supports two main selection statements: the if statement and the switch statement.

2. Explain the syntax of the if statement in Java.
The syntax of the if statement is:
if (condition) {
    // code block to be executed if the condition is true
}

3. What is the purpose of the else statement in Java if statements?
The else statement is used along with the if statement to execute a block of code if the
condition of the if statement is false.

4. How does the else if statement work in Java if statements?
The else if statement allows you to check multiple conditions sequentially after the initial
if condition. If the if condition is false, it checks the condition specified in the else if
statement.

5. Explain the syntax of the switch statement in Java.
The syntax of the switch statement is:
switch (expression) {
    case value1:
        // code block to be executed if expression equals value1
        break;
    case value2:
        // code block to be executed if expression equals value2
        break;
    // other cases...
    default:
        // code block to be executed if expression doesn't match any case
}

6. What is the role of the break statement in the switch statement?
The break statement is used to exit the switch statement once a matching case is found. It
prevents fall-through to subsequent case blocks.

7. How do you handle default behavior in a switch statement?
The default case is used to specify the default behavior when none of the case values match
the expression.

8. What is the difference between the if statement and the switch statement?
The if statement allows you to evaluate a single condition, while the switch statement is
used for multi-way branching based on the value of an expression. if statements are more
flexible and can handle complex conditions, whereas switch statements are more concise and
suitable for situations where multiple values need to be compared.

9. When would you use a series of if statements versus a switch statement?
1. Use a series of if statements when the conditions are complex or when you need to check for
inequality. Use a switch statement when you have a fixed set of values to compare and the
conditions are simple.

2. A switch statement is generally preferred when dealing with a fixed set of possible values
and the code for each value is relatively simple. If the logic gets complex or there are many
conditions to check, an if-else chain might be more readable.

Let's illustrate the preference for a switch statement when dealing with a fixed set of values
and relatively simple code, and the use of an if-else chain when the logic becomes more complex
or when there are many conditions to check.

In this example, the code checks the value of dayOfWeek and prints the corresponding day of the
week. Each case is simple and concise, making the switch statement an appropriate choice.
public class SwitchExample {
    public static void main(String[] args) {
        int dayOfWeek = 3; // Assume it's Wednesday

        switch (dayOfWeek) {
            case 1:
                System.out.println("Monday");
                break;
            case 2:
                System.out.println("Tuesday");
                break;
            case 3:
                System.out.println("Wednesday");
                break;
            case 4:
                System.out.println("Thursday");
                break;
            case 5:
                System.out.println("Friday");
                break;
            case 6:
                System.out.println("Saturday");
                break;
            case 7:
                System.out.println("Sunday");
                break;
            default:
                System.out.println("Invalid day");
        }
    }
}

Now, let's consider a scenario where an if-else chain might be more readable due to complex logic:

In this example, the code checks the age, gender, and student status to determine the appropriate
message to print. The logic involves nested if-else statements, which can become harder to read
as the conditions and branches increase. In such cases, using a switch statement might not be the
best choice due to its limitations, and an if-else chain can be more readable and maintainable.

public class IfElseChainExample {
    public static void main(String[] args) {
        int age = 25;
        String gender = "male";
        boolean isStudent = false;

        if (age >= 18) {
            if (gender.equals("male")) {
                if (isStudent) {
                    System.out.println("You are a male student above 18 years old.");
                } else {
                    System.out.println("You are a male above 18 years old.");
                }
            } else if (gender.equals("female")) {
                if (isStudent) {
                    System.out.println("You are a female student above 18 years old.");
                } else {
                    System.out.println("You are a female above 18 years old.");
                }
            } else {
                System.out.println("Unknown gender.");
            }
        } else {
            System.out.println("You are under 18 years old.");
        }
    }
}

10. Explain the concept of short-circuit evaluation in Java if statements and provide an example.
Short-circuit evaluation is a behavior in which the second operand of a logical && (AND) or ||
(OR) operator is evaluated only if the result of the overall expression is not already determined
by the evaluation of the first operand.
Example:
boolean condition1 = true;
boolean condition2 = false;
if (condition1 && condition2) {
}

11. Discuss the difference between if statements and ternary conditional expressions in Java.
If statements are used for conditional branching, allowing for executing different blocks of
code based on a condition. Ternary conditional expressions (condition ? expression1 : expression2)
provide a concise way to express a conditional assignment or expression where one of two values
is chosen based on a condition.

12. Explain the concept of the ternary operator in Java and provide an example.
The ternary operator (? :) is a shorthand way of expressing an if-else statement in a single line.
It evaluates a boolean expression and returns one of two values based on the result of the evaluation.
Example:
int x = 5;
String result = (x > 0) ? "Positive" : "Negative";
System.out.println(result); // Output: Positive

13. Discuss the use of the switch statement with enum types in Java and provide an example.
In Java, the switch statement can be used with enum types to handle different cases based on
the values of enum constants.
Example:
enum Day { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY }

Day today = Day.WEDNESDAY;
switch (today) {
    case MONDAY:
        System.out.println("Start of the week");
        break;
    case WEDNESDAY:
        System.out.println("Midweek");
        break;
    // Other cases...
}

14. Explain the concept of fall-through in switch statements in Java and provide an example.
Fall-through occurs when the control flow of a switch statement continues to the next case
label after executing the block of code associated with the matched case.
Example:
int x = 2;
switch (x) {
    case 1:
        System.out.println("One");
    case 2:
        System.out.println("Two"); // This will be printed due to fall-through
        break;
    case 3:
        System.out.println("Three");
}

15. Explain the difference between using a ternary operator and an if-else statement for a
simple condition. When might you prefer one over the other?
Ternary Operator: A concise way to express a simple if-else condition in one line.
If-Else Statement: More readable and maintainable for complex conditions.
Preference: Use a ternary operator for short, straightforward conditions to improve code
readability. However, for complex logic or improving code maintainability, opt for if-else
statements.

