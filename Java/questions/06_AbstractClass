Questions
=========
1. What is an abstract class in Java?
An abstract class in Java is a class that cannot be instantiated directly. It serves as a
blueprint for other classes and may contain abstract methods, which are methods declared
without implementation. Abstract classes can also have concrete methods and fields.

2. How do you declare an abstract class in Java?
An abstract class is declared using the abstract keyword. For example:
public abstract class AbstractClass {
    // Abstract methods and/or concrete methods
}

3. Can an abstract class have constructors?
Yes, an abstract class can have constructors. These constructors are typically used to
initialize fields of the abstract class or perform common initialization tasks. However,
abstract classes cannot be instantiated directly, so constructors are typically invoked
by subclasses.

4. What is the purpose of abstract methods in an abstract class?
Abstract methods define the interface for the subclasses. They declare the method signature
without providing the implementation. Subclasses of the abstract class must provide
implementations for all abstract methods, or they themselves must be declared as abstract.

5. Can an abstract class have concrete methods?
Yes, an abstract class can have concrete (non-abstract) methods. These methods provide
default behavior or functionality that subclasses can inherit. Subclasses may choose to
override these methods to provide their own implementation or can use them as-is.

6. Can an abstract class extend another abstract class?
Yes, an abstract class can extend another abstract class. This allows for the creation
of hierarchical class structures where each abstract class can provide some level of
implementation while still leaving some methods to be implemented by subclasses.

7. What happens if a subclass does not implement all the abstract methods of its superclass?
If a subclass fails to implement all the abstract methods inherited from its superclass,
the subclass itself must be declared as abstract. Abstract subclasses cannot be instantiated
directly, so any concrete subclass of the abstract subclass must provide implementations for
all inherited abstract methods.

8. Can an abstract class be final in Java?
No, an abstract class cannot be declared as final. The purpose of an abstract class is to
be subclassed and extended by other classes. Declaring it as final would prevent this behavior.

9. When should you use an abstract class instead of an interface?
Use an abstract class when you want to provide a common base implementation for a group of
related classes. Abstract classes can contain fields, constructors, and concrete methods in
addition to abstract methods. Interfaces, on the other hand, are used to define contracts for
unrelated classes and support multiple inheritance.

10. Can you declare an abstract method as private or static?
Private: No, abstract methods cannot be private. The purpose of an abstract method is to be
overridden by subclasses, and private methods are not accessible outside the class.
Static: No, abstract methods cannot be static. Static methods belong to the class itself, not
instances. Overriding doesn't apply to static methods, and abstract methods require
implementation in subclasses.

11. Difference between abstract classes and interfaces?
Both abstract classes and interfaces promote abstraction in Java. However, there are key
differences:
1. Implementation: Abstract classes can have concrete methods providing default
implementations, while interfaces only contain abstract methods.
2. Multiple Inheritance: A class can inherit from only one superclass but can implement
multiple interfaces, achieving a form of multiple inheritance.
3. Instantiation: You cannot create objects of an abstract class, but you can create
objects of classes that implement an interface.

12. Can a method in an abstract class be both abstract and static? If not, why?
No, a method cannot be both abstract and static in Java. Abstract methods are meant
to be overridden by subclasses, while static methods belong to the class itself and
cannot be overridden. Combining these modifiers would create a contradiction in terms
of method behavior.

13. How does the concept of multiple inheritance relate to abstract classes in Java?
Java does not support multiple inheritance of classes, meaning a class cannot directly
extend more than one class. However, a Java class can implement multiple interfaces.
Abstract classes can be part of a hierarchy where multiple abstract classes extend
a common abstract superclass, but this does not violate the single inheritance rule.

14. Is it possible to create an instance of an abstract class using anonymous class
instantiation?
Yes, it's possible to create an instance of an abstract class using anonymous class
instantiation. However, you would need to provide implementations for all abstract
methods of the abstract class within the anonymous class.

15. How can you prevent subclassing of an abstract class in Java?
To prevent subclassing of an abstract class, you can declare the class itself as 'final'.
This prevents any further extension of the class hierarchy beyond the abstract class.
However, this approach should be used judiciously, as it limits potential flexibility
and reuse.

16. Can an abstract class implement an interface? If yes, provide an example scenario.
Yes, an abstract class can implement an interface. One scenario is when you want to
provide default implementations for some methods defined in the interface, allowing
concrete subclasses to override only the necessary methods. This can help reduce
redundancy in the subclass implementations.

17. Can you create an abstract method with an access modifier (public, protected)?
Yes, abstract methods can have access modifiers (public, protected)  to control their
visibility and accessibility by subclasses. Public abstract methods are accessible by
any subclass, while protected abstract methods are only accessible by subclasses within
the same package or subclasses extending the class in different packages.

18. Can you create an abstract class with a main method?
Technically, yes, you can declare a main method in an abstract class. However, it's not
recommended. Since you cannot directly create objects of an abstract class, the main method
wouldn't be usable in the typical way. It might be better to move the main method to a
concrete subclass.

19. What is the default access modifier for an abstract method?
The default or implicit modifier for abstract method is Public.

20. Describe a scenario where you might use an abstract class with only concrete methods.
This scenario is less common but can be useful for:

Utility Classes: An abstract class with only static utility methods can be used to group
related utility functions without the need for creating objects. Subclasses can extend
this class to add more utility methods specific to their needs.

Template Method Pattern: In this design pattern, an abstract class defines the overall
structure of an operation with concrete methods for some steps. Subclasses can override
specific steps to customize the behavior while inheriting the common structure.

21. Explain the concept of abstract class loading and instantiation in Java. How does it
differ from loading and instantiating concrete classes?
Abstract classes in Java can be loaded and instantiated like any other class, but with
some differences. During class loading, the abstract class bytecode is loaded into memory
by the classloader, but instances of abstract classes cannot be created directly. However,
concrete subclasses of the abstract class can be instantiated. The instantiation process
involves creating an object of the concrete subclass, which inherits the abstract class's
properties and behaviors.

22. Can an abstract class have a non-abstract (concrete) method with the same signature as
one of its abstract methods? If yes, explain the implications.
Yes, an abstract class can have a non-abstract method with the same signature as one of its
abstract methods. This scenario is known as method hiding. When a subclass overrides the
abstract method and provides a concrete implementation, the non-abstract method in the
abstract class with the same signature becomes hidden. The implications include potential
confusion and unexpected behavior if developers mistakenly call the hidden method thinking
it will execute the overridden implementation.

23. Explain the relationship between abstract classes, anonymous inner classes, and lambda
expressions in Java. How do they complement each other in modern Java programming?
Abstract classes, anonymous inner classes, and lambda expressions are all mechanisms for
achieving abstraction and defining behavior in Java. Abstract classes provide a way to define
a common interface with concrete methods and abstract methods. Anonymous inner classes allow
for on-the-fly implementation of interfaces or abstract classes without explicitly defining
a separate class. Lambda expressions provide a concise syntax for representing anonymous
functions, which can be used as arguments to methods or assigned to variables. Together, they
offer flexibility and expressiveness in modern Java programming, allowing developers to write
more concise and readable code by leveraging abstraction and functional programming paradigms.

24. Can you declare abstract methods that throw exceptions? If so, how are exceptions handled
in such scenarios?
Yes, you can declare abstract methods that throw exceptions. However, there's a twist to consider:
The abstract method signature must include the throws clause specifying the checked exceptions
it might throw.
Subclasses overriding the abstract method must either handle the declared exceptions or propagate
them further using throws clause in their method signature.

public class ACExceptionHandleDemo {

    public static void main(String[] args) throws IOException {
        SubClass subClass = new SubClass();
        subClass.readData();
    }

    public static abstract class SuperClass {

        abstract void readData() throws IOException;
    }

    public static class SubClass extends SuperClass {
        @Override
        void readData() throws IOException {
            System.out.println("Read Data Method In SubClass");
        }
    }
}

25. Explain how you can utilize inner classes with abstract classes. Describe potential use
cases for this combination?
Abstract classes can leverage inner classes for various purposes:

Helper Classes: Define private inner classes within the abstract class to encapsulate
helper methods specific to the functionality provided by the abstract class. These inner
classes can access the abstract class's members directly, promoting code organization
and encapsulation.

Nested Abstract Classes: Create nested abstract classes within an outer abstract class
to represent more granular functionalities related to the overall concept. This allows
for a hierarchical structure with different levels of abstraction.

abstract class AbstractClass {
    private int data;

    // Constructor
    public AbstractClass(int data) {
        this.data = data;
    }

    // Abstract method
    abstract void abstractMethod();

    // Inner class for helper methods
    private class Helper {
        // Helper method to process data
        public void processData() {
            System.out.println("Processing data: " + data);
        }
    }

    // Method to perform an operation using the helper method
    public void performOperation() {
        Helper helper = new Helper();
        helper.processData();
        abstractMethod(); // Call to abstract method
    }

    // Nested abstract class
    abstract class NestedAbstractClass {
        abstract void nestedAbstractMethod();
    }
}

// Concrete subclass
class ConcreteClass extends AbstractClass {
    // Constructor
    public ConcreteClass(int data) {
        super(data);
    }

    // Implementation of abstract method
    @Override
    void abstractMethod() {
        System.out.println("Concrete implementation of abstractMethod");
    }

    // Nested concrete class
    class NestedConcreteClass extends NestedAbstractClass {
        // Implementation of nested abstract method
        @Override
        void nestedAbstractMethod() {
            System.out.println("Concrete implementation of nestedAbstractMethod");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating an instance of ConcreteClass
        ConcreteClass instance = new ConcreteClass(10);

        // Calling method to perform operation
        instance.performOperation();

        // Creating an instance of NestedConcreteClass
        ConcreteClass.NestedConcreteClass nestedInstance = instance.new NestedConcreteClass();

        // Calling method from nested concrete class
        nestedInstance.nestedAbstractMethod();
    }
}

26. Why we can't instantiate Abstract class? Explain the reason?
In Java, you cannot instantiate an abstract class directly because abstract classes are
incomplete, meaning they contain one or more abstract methods that lack implementation.
Abstract methods are intended to be implemented by concrete subclasses, providing specific
functionality.

The main reason behind not allowing instantiation of abstract classes is to enforce the
concept of abstraction and to prevent the creation of objects that are incomplete or lack
essential functionality.

Here are some key points explaining why you can't instantiate an abstract class:

Incomplete Implementation: Abstract classes may contain one or more abstract methods, which
are methods without a body. These methods are meant to be implemented by concrete subclasses
to provide specific behavior. Since abstract classes themselves are incomplete due to the
presence of abstract methods, Java prevents direct instantiation of such classes.

Abstraction and Design: Abstract classes serve as blueprints for creating concrete subclasses.
They define a common interface and provide a structure for subclasses to follow. Instantiating
an abstract class would violate the principle of abstraction, as it would create objects without
fully defining their behavior.

Enforcement of Contracts: Abstract classes often define contracts or protocols that concrete
subclasses must adhere to. By preventing instantiation of abstract classes, Java ensures that
these contracts are fulfilled by providing implementations for all abstract methods.

Potential Ambiguity: If instantiation of abstract classes were allowed, it would lead to
ambiguity regarding the behavior of objects. Since abstract classes may contain a mix of
concrete and abstract methods, it would be unclear which methods should be executed when an
object is instantiated.

Encapsulation and Modularity: Abstract classes encapsulate common behavior and provide a modular
approach to software design. Allowing instantiation of abstract classes would break encapsulation
and hinder the modularity of the codebase.

What is Abstraction Leak?
The term "abstraction leak" refers to situations where implementation details, intended to be hidden,
become visible to users of an abstraction. This can happen when the abstraction is incomplete or when
internal details are exposed unintentionally, leading to potential misuse or misunderstanding.

What are the advantages of Interface over Abstract Class?
Multiple Inheritance: Interfaces in Java allow a class to implement multiple interfaces, enabling it
to inherit behaviors from multiple sources.

Contractual Agreement: Interfaces define a contract for implementing classes, ensuring consistency in
behavior across different implementations.

Compatibility with Existing Class Hierarchies: Since Java doesn't support multiple inheritance with
classes, interfaces offer a way to extend functionality without altering existing class hierarchies.

Promotes Loose Coupling: Interfaces promote loose coupling by allowing classes to interact based on
interfaces rather than concrete implementations, facilitating easier maintenance and modifications.

Supports Distributed Systems: Interfaces are commonly used in distributed systems to define remote
services and communicate between components.

How abstraction contribute in Code Reusability and Maintainability?
Code Reusability: Abstraction allows for the creation of generic, reusable components that can be
easily incorporated into different parts of the codebase. By hiding implementation details and
exposing only essential interfaces, abstract components can be reused across various contexts.

Maintainability: Abstraction simplifies code maintenance by encapsulating complex implementation
details within abstract components. This separation of concerns makes it easier to modify or replace
specific implementations without affecting other parts of the system. Additionally, abstraction
promotes a clear division between interface and implementation, making the codebase easier to
understand and manage over time.
