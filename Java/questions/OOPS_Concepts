Questions
=========
1. Can you explain what object-oriented programming (OOP) is and how Java supports it?
Object-oriented programming (OOP) is a programming paradigm that revolves around the concept
of "objects," which are instances of classes representing real-world entities. OOP aims to
organize code into reusable and modular components, making it easier to understand, maintain,
and scale.

In Java, OOP is supported through several key features:

Classes and Objects: Java allows you to define classes, which serve as blueprints for creating
objects. Objects are instances of classes and encapsulate both data (attributes) and behaviors
(methods).

Inheritance: Java supports inheritance, allowing classes to inherit attributes and methods from
other classes. This promotes code reuse and enables the creation of hierarchical relationships
between classes.

Polymorphism: Java supports polymorphism, which allows objects to be treated as instances of
their parent class or any of its subclasses. This enables flexibility in method invocation and
facilitates code extensibility.

Encapsulation: Java promotes encapsulation, the bundling of data and methods within a class.
Access to the internal state of an object is controlled through access modifiers (e.g., public,
private), ensuring data integrity and security.

Abstraction: Java encourages abstraction, the process of simplifying complex systems by hiding
unnecessary details and exposing only essential features. Abstract classes and interfaces enable
the creation of generalized templates for classes, promoting code flexibility and maintainability.

What are the main principles of object-oriented programming, and how are they implemented in Java?

The main principles of object-oriented programming are as below,

Inheritance: Java supports inheritance, allowing classes to inherit attributes and methods from
other classes. This promotes code reuse and enables the creation of hierarchical relationships
between classes.

Polymorphism: Java supports polymorphism, which allows objects to be treated as instances of
their parent class or any of its subclasses. This enables flexibility in method invocation and
facilitates code extensibility.

Encapsulation: Java promotes encapsulation, the bundling of data and methods within a class.
Access to the internal state of an object is controlled through access modifiers (e.g., public,
private), ensuring data integrity and security.

Abstraction: Java encourages abstraction, the process of simplifying complex systems by hiding
unnecessary details and exposing only essential features. Abstract classes and interfaces enable
the creation of generalized templates for classes, promoting code flexibility and maintainability.