Questions
=========
1. What is composition and aggregation in Java?
1. Composition and aggregation are two types of relationships between classes in
object-oriented programming. Both composition and aggregation represent "has-a"
relationships between objects in Java. However, they differ in the strength of
that relationship.
2. Composition implies a strong relationship where the child cannot exist independent
of the parent. A strong relationship where the whole object (containing object) is
responsible for the lifetime of the part object (contained object). If the whole object
is destroyed, the part object is also destroyed.
3. Aggregation implies a weak relationship where the child can exist independently of
the parent. A weaker relationship where the whole object can exist independently of
the part object. The lifetime of the part object is not solely dependent on the whole
object.

2. How would you differentiate between composition and aggregation?
1. Composition implies a "whole-part" relationship where the part cannot exist without
the whole.
2. Aggregation implies a "has-a" relationship where the part can exist independently.

3. Give an example of composition in Java.
class Engine {
    // Engine implementation
}

class Car {
    private Engine engine; // Composition

    public Car() {
        this.engine = new Engine();
    }
}

4. Provide an example of aggregation in Java.
class Books {
    // Books implementation
}

class Library {
  private List<Books> books;

  public Library() {
    books = new ArrayList<>();
  }

  public void addBook(Books book) {
    books.add(book);
  }
}

5. What are the advantages of using composition over inheritance?
1. Composition provides better flexibility as it allows changing the behavior of classes
at runtime.
2. It promotes code reusability without creating overly complex inheritance hierarchies.
3. It avoids the issues related to tight coupling that often arise with inheritance.

6. How do you implement composition in Java?
1. Composition in Java is implemented by including an instance of one class within another class.
2. The contained object is often initialized within the constructor of the containing class.

7. Explain the concept of "ownership" in composition.
1. In composition, the containing object (parent) owns the contained object (child).
2. The contained object has no independent existence and is destroyed when the containing object
is destroyed.

8. Can you have a circular reference in composition or aggregation?
1. Circular reference is possible in composition, but it's not recommended as it can lead to
memory leaks.
2. In aggregation, circular reference is possible and is often used in scenarios like trees
or graphs.

9. How would you handle memory management in composition and aggregation?
1. In composition, memory management is handled automatically by the garbage collector. When the
containing object is no longer referenced, the contained object is also eligible for garbage collection.
2. In aggregation, each object manages its own memory. When an object is no longer needed, it must
be explicitly deallocated to avoid memory leaks.

10. What are the key considerations when choosing between composition and aggregation?
1. Use composition when the child object is a fundamental part of the parent object.
2. Use aggregation when the child object can exist independently of the parent object.
3. Consider the lifecycle management and ownership relationship between the objects.
4. Choose composition for strong relationships and aggregation for weaker relationships.

11. What are the benefits of using Composition and Aggregation?
1. Improved Object Lifecycle Management: Ensures proper creation and destruction
of related objects.
2. Modular Design: Breaks down complex objects into smaller, reusable components.
3. Encapsulation: Hides internal implementation details of the contained object.

12. How does composition relate to the "HAS-A" relationship in object-oriented design?
Composition represents a "HAS-A" relationship between two classes, where one class contains another
as a part of its state.
For example, a Car "HAS-A" Engine, meaning a Car contains an Engine object as one of its attributes.

13. Explain the potential drawbacks of using composition excessively.
Excessive composition can tightly couple objects, making them less reusable and harder to test
in isolation. It might also lead to complex object hierarchies and difficulty in managing
object lifecycles.

14. How can you leverage composition and aggregation to achieve immutability in Java objects?
Immutability means an object's state cannot be changed after creation.
Composition can help achieve immutability. By making member objects immutable, the whole object
becomes immutable.
Aggregation can also be used if the part objects are immutable.

15. Can you achieve composition using public constructors for both whole and part objects?
Yes, In a pure composition scenario, even if a part object has a public constructor, it should
not be instantiated or managed outside the scope of its whole object to maintain the composition
semantics. Let's illustrate this with an example:

Example: Computer and Processor Relationship
Imagine a Computer class (the whole) that has a Processor class as a part. In a compositional
relationship, the Computer should control the lifecycle of the Processor.

public class Processor {
    private String model;

    // Public constructor
    public Processor(String model) {
        this.model = model;
    }

    public String getModel() {
        return model;
    }
}

public class Computer {
    private Processor processor; // Composition: Computer owns Processor

    public Computer(String processorModel) {
        this.processor = new Processor(processorModel); // The Computer controls the Processor's lifecycle
    }

    public Processor getProcessor() {
        return processor;
    }
}

Public Constructors: Both Computer and Processor have public constructors. This allows
external entities to create instances of these classes. However, the compositional
relationship is maintained by how the Computer class internally manages Processor.

Controlled Lifecycle: The Computer class controls the lifecycle of Processor by instantiating
it within its constructor. This means the Processor instance is bound to the lifecycle of its
Computer instanceâ€”when the Computer is created, so is the Processor; when the Computer is
destroyed, the Processor goes with it.

Encapsulation: The Computer class does not expose a way to replace its Processor after creation,
emphasizing the strong association between the two. While you can access the Processor through
a getter, there is no setter method, ensuring the Processor instance cannot be swapped out.

16. How Composition and Aggregation are implemented?
Your explanation is clear. You could also mention that composition is often implemented using
constructor injection or setter injection, while aggregation can be implemented using member
variables or method parameters.
